Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    BEGIN
    BOOL
    CHAR
    COMA
    COMILLA
    COMILLAS
    CONST
    CTE_S
    DETERMATRIZ
    DO
    DOSPUNTOS
    ELIF
    ELSE
    END
    EOF
    FALSE
    FLOAT
    GIG
    GT
    IF
    IGIG
    INT
    INVERMATRIZ
    LIG
    LL
    LP
    LT
    NIGUAL
    NOT
    OR
    PRINT
    PUNTO
    RETURN
    RL
    RP
    SELECT
    SWITCH
    THEN
    TRANSMATRIZ
    TRUE
    VOID
    WHILE

Grammar

Rule 0     S' -> calc
Rule 1     calc -> expression
Rule 2     calc -> var_assign
Rule 3     calc -> empty
Rule 4     var_assign -> ID IGUAL expression
Rule 5     expression -> expression MULT expression
Rule 6     expression -> expression DIV expression
Rule 7     expression -> expression SUMA expression
Rule 8     expression -> expression RESTA expression
Rule 9     expression -> CTE_I
Rule 10    expression -> CTE_F
Rule 11    expression -> CTE_C
Rule 12    expression -> ID
Rule 13    expression -> ID row
Rule 14    expression -> ID matrix
Rule 15    value_list -> expression
Rule 16    row_list -> row
Rule 17    row_list -> expression PYCOMA expression
Rule 18    row -> LC expression RC
Rule 19    matrix -> row row
Rule 20    empty -> <empty>

Terminals, with rules where they appear

AND                  : 
BEGIN                : 
BOOL                 : 
CHAR                 : 
COMA                 : 
COMILLA              : 
COMILLAS             : 
CONST                : 
CTE_C                : 11
CTE_F                : 10
CTE_I                : 9
CTE_S                : 
DETERMATRIZ          : 
DIV                  : 6
DO                   : 
DOSPUNTOS            : 
ELIF                 : 
ELSE                 : 
END                  : 
EOF                  : 
FALSE                : 
FLOAT                : 
GIG                  : 
GT                   : 
ID                   : 4 12 13 14
IF                   : 
IGIG                 : 
IGUAL                : 4
INT                  : 
INVERMATRIZ          : 
LC                   : 18
LIG                  : 
LL                   : 
LP                   : 
LT                   : 
MULT                 : 5
NIGUAL               : 
NOT                  : 
OR                   : 
PRINT                : 
PUNTO                : 
PYCOMA               : 17
RC                   : 18
RESTA                : 8
RETURN               : 
RL                   : 
RP                   : 
SELECT               : 
SUMA                 : 7
SWITCH               : 
THEN                 : 
TRANSMATRIZ          : 
TRUE                 : 
VOID                 : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

calc                 : 0
empty                : 3
expression           : 1 4 5 5 6 6 7 7 8 8 15 17 17 18
matrix               : 14
row                  : 13 16 19 19
row_list             : 
value_list           : 
var_assign           : 2

Parsing method: LALR

state 0

    (0) S' -> . calc
    (1) calc -> . expression
    (2) calc -> . var_assign
    (3) calc -> . empty
    (5) expression -> . expression MULT expression
    (6) expression -> . expression DIV expression
    (7) expression -> . expression SUMA expression
    (8) expression -> . expression RESTA expression
    (9) expression -> . CTE_I
    (10) expression -> . CTE_F
    (11) expression -> . CTE_C
    (12) expression -> . ID
    (13) expression -> . ID row
    (14) expression -> . ID matrix
    (4) var_assign -> . ID IGUAL expression
    (20) empty -> .

    CTE_I           shift and go to state 5
    CTE_F           shift and go to state 6
    CTE_C           shift and go to state 7
    ID              shift and go to state 8
    $end            reduce using rule 20 (empty -> .)

    calc                           shift and go to state 1
    expression                     shift and go to state 2
    var_assign                     shift and go to state 3
    empty                          shift and go to state 4

state 1

    (0) S' -> calc .



state 2

    (1) calc -> expression .
    (5) expression -> expression . MULT expression
    (6) expression -> expression . DIV expression
    (7) expression -> expression . SUMA expression
    (8) expression -> expression . RESTA expression

    $end            reduce using rule 1 (calc -> expression .)
    MULT            shift and go to state 9
    DIV             shift and go to state 10
    SUMA            shift and go to state 11
    RESTA           shift and go to state 12


state 3

    (2) calc -> var_assign .

    $end            reduce using rule 2 (calc -> var_assign .)


state 4

    (3) calc -> empty .

    $end            reduce using rule 3 (calc -> empty .)


state 5

    (9) expression -> CTE_I .

    MULT            reduce using rule 9 (expression -> CTE_I .)
    DIV             reduce using rule 9 (expression -> CTE_I .)
    SUMA            reduce using rule 9 (expression -> CTE_I .)
    RESTA           reduce using rule 9 (expression -> CTE_I .)
    $end            reduce using rule 9 (expression -> CTE_I .)
    RC              reduce using rule 9 (expression -> CTE_I .)


state 6

    (10) expression -> CTE_F .

    MULT            reduce using rule 10 (expression -> CTE_F .)
    DIV             reduce using rule 10 (expression -> CTE_F .)
    SUMA            reduce using rule 10 (expression -> CTE_F .)
    RESTA           reduce using rule 10 (expression -> CTE_F .)
    $end            reduce using rule 10 (expression -> CTE_F .)
    RC              reduce using rule 10 (expression -> CTE_F .)


state 7

    (11) expression -> CTE_C .

    MULT            reduce using rule 11 (expression -> CTE_C .)
    DIV             reduce using rule 11 (expression -> CTE_C .)
    SUMA            reduce using rule 11 (expression -> CTE_C .)
    RESTA           reduce using rule 11 (expression -> CTE_C .)
    $end            reduce using rule 11 (expression -> CTE_C .)
    RC              reduce using rule 11 (expression -> CTE_C .)


state 8

    (12) expression -> ID .
    (13) expression -> ID . row
    (14) expression -> ID . matrix
    (4) var_assign -> ID . IGUAL expression
    (18) row -> . LC expression RC
    (19) matrix -> . row row

    MULT            reduce using rule 12 (expression -> ID .)
    DIV             reduce using rule 12 (expression -> ID .)
    SUMA            reduce using rule 12 (expression -> ID .)
    RESTA           reduce using rule 12 (expression -> ID .)
    $end            reduce using rule 12 (expression -> ID .)
    IGUAL           shift and go to state 15
    LC              shift and go to state 16

    row                            shift and go to state 13
    matrix                         shift and go to state 14

state 9

    (5) expression -> expression MULT . expression
    (5) expression -> . expression MULT expression
    (6) expression -> . expression DIV expression
    (7) expression -> . expression SUMA expression
    (8) expression -> . expression RESTA expression
    (9) expression -> . CTE_I
    (10) expression -> . CTE_F
    (11) expression -> . CTE_C
    (12) expression -> . ID
    (13) expression -> . ID row
    (14) expression -> . ID matrix

    CTE_I           shift and go to state 5
    CTE_F           shift and go to state 6
    CTE_C           shift and go to state 7
    ID              shift and go to state 18

    expression                     shift and go to state 17

state 10

    (6) expression -> expression DIV . expression
    (5) expression -> . expression MULT expression
    (6) expression -> . expression DIV expression
    (7) expression -> . expression SUMA expression
    (8) expression -> . expression RESTA expression
    (9) expression -> . CTE_I
    (10) expression -> . CTE_F
    (11) expression -> . CTE_C
    (12) expression -> . ID
    (13) expression -> . ID row
    (14) expression -> . ID matrix

    CTE_I           shift and go to state 5
    CTE_F           shift and go to state 6
    CTE_C           shift and go to state 7
    ID              shift and go to state 18

    expression                     shift and go to state 19

state 11

    (7) expression -> expression SUMA . expression
    (5) expression -> . expression MULT expression
    (6) expression -> . expression DIV expression
    (7) expression -> . expression SUMA expression
    (8) expression -> . expression RESTA expression
    (9) expression -> . CTE_I
    (10) expression -> . CTE_F
    (11) expression -> . CTE_C
    (12) expression -> . ID
    (13) expression -> . ID row
    (14) expression -> . ID matrix

    CTE_I           shift and go to state 5
    CTE_F           shift and go to state 6
    CTE_C           shift and go to state 7
    ID              shift and go to state 18

    expression                     shift and go to state 20

state 12

    (8) expression -> expression RESTA . expression
    (5) expression -> . expression MULT expression
    (6) expression -> . expression DIV expression
    (7) expression -> . expression SUMA expression
    (8) expression -> . expression RESTA expression
    (9) expression -> . CTE_I
    (10) expression -> . CTE_F
    (11) expression -> . CTE_C
    (12) expression -> . ID
    (13) expression -> . ID row
    (14) expression -> . ID matrix

    CTE_I           shift and go to state 5
    CTE_F           shift and go to state 6
    CTE_C           shift and go to state 7
    ID              shift and go to state 18

    expression                     shift and go to state 21

state 13

    (13) expression -> ID row .
    (19) matrix -> row . row
    (18) row -> . LC expression RC

    MULT            reduce using rule 13 (expression -> ID row .)
    DIV             reduce using rule 13 (expression -> ID row .)
    SUMA            reduce using rule 13 (expression -> ID row .)
    RESTA           reduce using rule 13 (expression -> ID row .)
    $end            reduce using rule 13 (expression -> ID row .)
    RC              reduce using rule 13 (expression -> ID row .)
    LC              shift and go to state 16

    row                            shift and go to state 22

state 14

    (14) expression -> ID matrix .

    MULT            reduce using rule 14 (expression -> ID matrix .)
    DIV             reduce using rule 14 (expression -> ID matrix .)
    SUMA            reduce using rule 14 (expression -> ID matrix .)
    RESTA           reduce using rule 14 (expression -> ID matrix .)
    $end            reduce using rule 14 (expression -> ID matrix .)
    RC              reduce using rule 14 (expression -> ID matrix .)


state 15

    (4) var_assign -> ID IGUAL . expression
    (5) expression -> . expression MULT expression
    (6) expression -> . expression DIV expression
    (7) expression -> . expression SUMA expression
    (8) expression -> . expression RESTA expression
    (9) expression -> . CTE_I
    (10) expression -> . CTE_F
    (11) expression -> . CTE_C
    (12) expression -> . ID
    (13) expression -> . ID row
    (14) expression -> . ID matrix

    CTE_I           shift and go to state 5
    CTE_F           shift and go to state 6
    CTE_C           shift and go to state 7
    ID              shift and go to state 18

    expression                     shift and go to state 23

state 16

    (18) row -> LC . expression RC
    (5) expression -> . expression MULT expression
    (6) expression -> . expression DIV expression
    (7) expression -> . expression SUMA expression
    (8) expression -> . expression RESTA expression
    (9) expression -> . CTE_I
    (10) expression -> . CTE_F
    (11) expression -> . CTE_C
    (12) expression -> . ID
    (13) expression -> . ID row
    (14) expression -> . ID matrix

    CTE_I           shift and go to state 5
    CTE_F           shift and go to state 6
    CTE_C           shift and go to state 7
    ID              shift and go to state 18

    expression                     shift and go to state 24

state 17

    (5) expression -> expression MULT expression .
    (5) expression -> expression . MULT expression
    (6) expression -> expression . DIV expression
    (7) expression -> expression . SUMA expression
    (8) expression -> expression . RESTA expression

    MULT            reduce using rule 5 (expression -> expression MULT expression .)
    DIV             reduce using rule 5 (expression -> expression MULT expression .)
    SUMA            reduce using rule 5 (expression -> expression MULT expression .)
    RESTA           reduce using rule 5 (expression -> expression MULT expression .)
    $end            reduce using rule 5 (expression -> expression MULT expression .)
    RC              reduce using rule 5 (expression -> expression MULT expression .)

  ! MULT            [ shift and go to state 9 ]
  ! DIV             [ shift and go to state 10 ]
  ! SUMA            [ shift and go to state 11 ]
  ! RESTA           [ shift and go to state 12 ]


state 18

    (12) expression -> ID .
    (13) expression -> ID . row
    (14) expression -> ID . matrix
    (18) row -> . LC expression RC
    (19) matrix -> . row row

    MULT            reduce using rule 12 (expression -> ID .)
    DIV             reduce using rule 12 (expression -> ID .)
    SUMA            reduce using rule 12 (expression -> ID .)
    RESTA           reduce using rule 12 (expression -> ID .)
    $end            reduce using rule 12 (expression -> ID .)
    RC              reduce using rule 12 (expression -> ID .)
    LC              shift and go to state 16

    row                            shift and go to state 13
    matrix                         shift and go to state 14

state 19

    (6) expression -> expression DIV expression .
    (5) expression -> expression . MULT expression
    (6) expression -> expression . DIV expression
    (7) expression -> expression . SUMA expression
    (8) expression -> expression . RESTA expression

    MULT            reduce using rule 6 (expression -> expression DIV expression .)
    DIV             reduce using rule 6 (expression -> expression DIV expression .)
    SUMA            reduce using rule 6 (expression -> expression DIV expression .)
    RESTA           reduce using rule 6 (expression -> expression DIV expression .)
    $end            reduce using rule 6 (expression -> expression DIV expression .)
    RC              reduce using rule 6 (expression -> expression DIV expression .)

  ! MULT            [ shift and go to state 9 ]
  ! DIV             [ shift and go to state 10 ]
  ! SUMA            [ shift and go to state 11 ]
  ! RESTA           [ shift and go to state 12 ]


state 20

    (7) expression -> expression SUMA expression .
    (5) expression -> expression . MULT expression
    (6) expression -> expression . DIV expression
    (7) expression -> expression . SUMA expression
    (8) expression -> expression . RESTA expression

    SUMA            reduce using rule 7 (expression -> expression SUMA expression .)
    RESTA           reduce using rule 7 (expression -> expression SUMA expression .)
    $end            reduce using rule 7 (expression -> expression SUMA expression .)
    RC              reduce using rule 7 (expression -> expression SUMA expression .)
    MULT            shift and go to state 9
    DIV             shift and go to state 10

  ! MULT            [ reduce using rule 7 (expression -> expression SUMA expression .) ]
  ! DIV             [ reduce using rule 7 (expression -> expression SUMA expression .) ]
  ! SUMA            [ shift and go to state 11 ]
  ! RESTA           [ shift and go to state 12 ]


state 21

    (8) expression -> expression RESTA expression .
    (5) expression -> expression . MULT expression
    (6) expression -> expression . DIV expression
    (7) expression -> expression . SUMA expression
    (8) expression -> expression . RESTA expression

    SUMA            reduce using rule 8 (expression -> expression RESTA expression .)
    RESTA           reduce using rule 8 (expression -> expression RESTA expression .)
    $end            reduce using rule 8 (expression -> expression RESTA expression .)
    RC              reduce using rule 8 (expression -> expression RESTA expression .)
    MULT            shift and go to state 9
    DIV             shift and go to state 10

  ! MULT            [ reduce using rule 8 (expression -> expression RESTA expression .) ]
  ! DIV             [ reduce using rule 8 (expression -> expression RESTA expression .) ]
  ! SUMA            [ shift and go to state 11 ]
  ! RESTA           [ shift and go to state 12 ]


state 22

    (19) matrix -> row row .

    MULT            reduce using rule 19 (matrix -> row row .)
    DIV             reduce using rule 19 (matrix -> row row .)
    SUMA            reduce using rule 19 (matrix -> row row .)
    RESTA           reduce using rule 19 (matrix -> row row .)
    $end            reduce using rule 19 (matrix -> row row .)
    RC              reduce using rule 19 (matrix -> row row .)


state 23

    (4) var_assign -> ID IGUAL expression .
    (5) expression -> expression . MULT expression
    (6) expression -> expression . DIV expression
    (7) expression -> expression . SUMA expression
    (8) expression -> expression . RESTA expression

    $end            reduce using rule 4 (var_assign -> ID IGUAL expression .)
    MULT            shift and go to state 9
    DIV             shift and go to state 10
    SUMA            shift and go to state 11
    RESTA           shift and go to state 12


state 24

    (18) row -> LC expression . RC
    (5) expression -> expression . MULT expression
    (6) expression -> expression . DIV expression
    (7) expression -> expression . SUMA expression
    (8) expression -> expression . RESTA expression

    RC              shift and go to state 25
    MULT            shift and go to state 9
    DIV             shift and go to state 10
    SUMA            shift and go to state 11
    RESTA           shift and go to state 12


state 25

    (18) row -> LC expression RC .

    LC              reduce using rule 18 (row -> LC expression RC .)
    MULT            reduce using rule 18 (row -> LC expression RC .)
    DIV             reduce using rule 18 (row -> LC expression RC .)
    SUMA            reduce using rule 18 (row -> LC expression RC .)
    RESTA           reduce using rule 18 (row -> LC expression RC .)
    $end            reduce using rule 18 (row -> LC expression RC .)
    RC              reduce using rule 18 (row -> LC expression RC .)

