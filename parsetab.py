
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftSUMARESTAleftMULTDIVAND BEGIN BOOL CHAR COMA COMILLA COMILLAS CONST CTE_C CTE_F CTE_I CTE_S DETERMATRIZ DIV DO DOSPUNTOS ELIF ELSE END EOF FALSE FLOAT GIG GT ID IF IGIG IGUAL INT INVERMATRIZ LC LIG LL LP LT MULT NIGUAL NOT OR PRINT PUNTO PYCOMA RC RESTA RETURN RL RP SELECT SUMA SWITCH THEN TRANSMATRIZ TRUE VOID WHILE\n    calc : expression\n         | var_assign\n         | empty\n    \n    var_assign : ID IGUAL expression\n    \n    expression : expression MULT expression\n               | expression DIV expression\n               | expression SUMA expression\n               | expression RESTA expression\n    \n    expression : CTE_I\n               | CTE_F\n               | CTE_C\n    \n    expression : ID\n               | ID row\n               | ID matrix\n    \n    value_list : expression\n    row_list   : row\n    \n    row_list   : expression PYCOMA expression\n    \n    row       : LC expression RC\n    \n    matrix    : row row\n    \n    empty :\n    '
    
_lr_action_items = {'CTE_I':([0,9,10,11,12,15,16,],[5,5,5,5,5,5,5,]),'CTE_F':([0,9,10,11,12,15,16,],[6,6,6,6,6,6,6,]),'CTE_C':([0,9,10,11,12,15,16,],[7,7,7,7,7,7,7,]),'ID':([0,9,10,11,12,15,16,],[8,18,18,18,18,18,18,]),'$end':([0,1,2,3,4,5,6,7,8,13,14,17,18,19,20,21,22,23,25,],[-20,0,-1,-2,-3,-9,-10,-11,-12,-13,-14,-5,-12,-6,-7,-8,-19,-4,-18,]),'MULT':([2,5,6,7,8,13,14,17,18,19,20,21,22,23,24,25,],[9,-9,-10,-11,-12,-13,-14,-5,-12,-6,9,9,-19,9,9,-18,]),'DIV':([2,5,6,7,8,13,14,17,18,19,20,21,22,23,24,25,],[10,-9,-10,-11,-12,-13,-14,-5,-12,-6,10,10,-19,10,10,-18,]),'SUMA':([2,5,6,7,8,13,14,17,18,19,20,21,22,23,24,25,],[11,-9,-10,-11,-12,-13,-14,-5,-12,-6,-7,-8,-19,11,11,-18,]),'RESTA':([2,5,6,7,8,13,14,17,18,19,20,21,22,23,24,25,],[12,-9,-10,-11,-12,-13,-14,-5,-12,-6,-7,-8,-19,12,12,-18,]),'RC':([5,6,7,13,14,17,18,19,20,21,22,24,25,],[-9,-10,-11,-13,-14,-5,-12,-6,-7,-8,-19,25,-18,]),'IGUAL':([8,],[15,]),'LC':([8,13,18,25,],[16,16,16,-18,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'calc':([0,],[1,]),'expression':([0,9,10,11,12,15,16,],[2,17,19,20,21,23,24,]),'var_assign':([0,],[3,]),'empty':([0,],[4,]),'row':([8,13,18,],[13,22,13,]),'matrix':([8,18,],[14,14,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> calc","S'",1,None,None,None),
  ('calc -> expression','calc',1,'p_calc','parser.py',15),
  ('calc -> var_assign','calc',1,'p_calc','parser.py',16),
  ('calc -> empty','calc',1,'p_calc','parser.py',17),
  ('var_assign -> ID IGUAL expression','var_assign',3,'p_var_assign','parser.py',24),
  ('expression -> expression MULT expression','expression',3,'p_expression','parser.py',31),
  ('expression -> expression DIV expression','expression',3,'p_expression','parser.py',32),
  ('expression -> expression SUMA expression','expression',3,'p_expression','parser.py',33),
  ('expression -> expression RESTA expression','expression',3,'p_expression','parser.py',34),
  ('expression -> CTE_I','expression',1,'p_expression_int_float','parser.py',40),
  ('expression -> CTE_F','expression',1,'p_expression_int_float','parser.py',41),
  ('expression -> CTE_C','expression',1,'p_expression_int_float','parser.py',42),
  ('expression -> ID','expression',1,'p_expression_var','parser.py',48),
  ('expression -> ID row','expression',2,'p_expression_var','parser.py',49),
  ('expression -> ID matrix','expression',2,'p_expression_var','parser.py',50),
  ('value_list -> expression','value_list',1,'p_list_first','parser.py',58),
  ('row_list -> row','row_list',1,'p_list_first','parser.py',59),
  ('row_list -> expression PYCOMA expression','row_list',3,'p_list_extend','parser.py',65),
  ('row -> LC expression RC','row',3,'p_row','parser.py',71),
  ('matrix -> row row','matrix',2,'p_matrix','parser.py',77),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',86),
]
