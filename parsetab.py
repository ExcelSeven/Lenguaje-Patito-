
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULDIVAND BEGIN BOOL CHAR COL COMILLA COMILLAS COMMA CONST CTE_B CTE_C CTE_F CTE_I CTE_S DETERMATRIZ DIV DO DOT ELIF ELSE ELSEIF END EOF EQUAL FALSE FLOAT FUNCTION GEQ GLOBAL GT ID IF INPUT INT INVERMATRIZ IS LB LC LEQ LET LOCAL LP LT MAIN MINUS MUL NEQ NOT OR PLUS PRINT PROGRAM RB RC RETURN RP SELECT SEMICOL SWITCH THEN TRANSMATRIZ TRUE VAR VOID WHILE\n    programa : PROGRAM ID SEMICOL programa1\n    \n    programa1 : vars funcion main funcion\n              | funcion main funcion\n              | funcion main\n              | vars funcion main\n              | vars funcion\n              | vars main\n              | vars main funcion\n              | funcion\n              | vars\n              | main\n              | empty\n    \n    main : tipo MAIN LP RP LB statement RB\n         | VOID tipo MAIN LP RP LB statement RB\n    \n    statement : asignacion SEMICOL statement\n              | if statement\n              | vars statement\n              | empty\n    \n    asignacion : ID IS value\n    \n    vars : VAR tipo vars1\n         | VAR tipo vars2\n         | VAR tipo vars3\n         | VAR tipo oper_aritmetica\n         | varsG\n         | empty\n    \n    vars1 : ID SEMICOL\n          | ID SEMICOL vars\n    \n    vars2 : ID IS value COMMA vars2\n          | ID IS value COMMA\n          | ID IS value SEMICOL vars\n    \n    vars3 : ID COMMA vars3\n          | ID SEMICOL vars\n          | ID SEMICOL\n    \n    varsG : VAR tipo vars1G\n         | VAR tipo vars2G\n         | VAR tipo vars3G\n         | VAR LB varsG RB\n    \n    vars1G : ID SEMICOL\n          | ID SEMICOL varsG\n    \n    vars2G : ID IS value check_type COMMA vars2G\n          | ID IS value check_type SEMICOL varsG\n          | empty\n    \n    vars3G : ID COMMA vars3G\n          | ID SEMICOL varsG\n          | ID SEMICOL\n    \n    tipo : INT\n        | FLOAT\n        | CHAR\n    \n    value : CTE_F\n          | CTE_I\n    \n    value : ID\n    \n    value : CTE_C\n    \n    value : COMILLA ID COMILLA\n          | COMILLAS ID COMILLAS\n    \n    check_type :\n    \n    funcion : VOID ID LP param RP LB statement RB funcion\n             | tipo ID LP param RP LB statement RB funcion\n             | VOID ID LP param RP LB statement RB\n             | tipo ID LP param RP LB statement RB\n\n    \n    param :\n    \n    var_lt : expr LT expr\n    \n    var_gt : expr GT expr\n    \n    var_leq : expr LEQ expr\n    \n    var_geq : expr GEQ expr\n    \n    var_equal : expr EQUAL expr\n    \n    var_neq : expr NEQ expr\n    \n    oper_aritmetica : ID IS expr SEMICOL\n\n    \n    expr : expr MUL expr\n         | expr DIV expr\n         | expr PLUS expr\n         | expr MINUS expr\n    \n    expr : CTE_I\n         | CTE_F\n    \n    expr : ID\n         | ID row\n         | ID matrix\n    \n    row       : LC expr RC\n    \n    matrix    : row row\n    \n    empty :\n    \n    if : IF LP expression RP check_bool gotof LB statement RB guarda_salto\n        | IF LP expression RP check_bool gotof LB statement RB guarda_salto elseif\n        | IF LP expression RP check_bool gotof LB statement RB guarda_salto else\n    \n    elseif : ELSEIF LP expression RP check_bool LB statement RB guarda_salto\n           | ELSEIF LP expression RP check_bool LB statement RB guarda_salto elseif\n           | ELSEIF LP expression RP check_bool LB statement RB guarda_salto else\n    \n    else : ELSE LB statement RB guarda_salto\n    \n    expression : var_gt\n               | var_lt\n               | var_equal\n               | var_neq\n               | var_geq\n               | var_leq\n               | expr\n               | TRUE\n               | FALSE\n               | ID\n    \n    check_bool :\n    \n    gotof :\n    \n    guarda_salto :\n    '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,4,5,6,7,8,9,12,14,15,16,17,18,19,22,28,29,32,33,34,35,36,37,38,39,41,48,49,52,53,58,59,60,70,71,80,81,83,90,91,110,111,112,120,121,122,129,140,141,142,143,157,158,160,161,169,],[0,-79,-1,-10,-9,-11,-12,-24,-46,-47,-48,-6,-7,-4,-79,-5,-8,-3,-20,-21,-22,-23,-34,-35,-36,-42,-2,-26,-79,-37,-27,-24,-25,-31,-43,-29,-79,-67,-33,-38,-28,-30,-79,-32,-24,-39,-13,-40,-41,-45,-59,-58,-14,-44,-57,-56,]),'ID':([2,11,12,13,14,15,16,22,30,31,33,34,35,36,37,38,39,41,49,50,51,52,53,58,59,60,67,68,70,71,74,79,80,81,83,84,85,86,87,90,91,92,93,94,97,98,99,102,103,110,111,112,120,121,122,130,133,134,138,140,141,142,160,163,164,165,166,167,168,178,180,181,182,183,186,187,191,193,194,196,197,198,199,],[3,24,-24,26,-46,-47,-48,40,26,24,-20,-21,-22,-23,-34,-35,-36,-42,-26,61,69,72,-37,-27,-24,-25,88,89,-31,-43,100,108,109,-79,-67,108,108,108,108,-33,-38,123,127,100,100,100,-25,100,100,-28,-30,139,-32,-24,-39,100,123,156,123,-40,-41,-45,-44,108,108,108,108,108,108,100,-99,-80,-81,-82,156,100,-99,-86,100,-99,-83,-84,-85,]),'SEMICOL':([3,40,61,62,63,64,65,66,69,72,77,78,82,96,104,106,107,108,114,115,116,117,118,119,123,124,125,126,127,137,145,159,],[4,49,-51,81,83,-49,-50,-52,90,91,-75,-76,113,130,-78,-72,-73,-74,-68,-69,-70,-71,-53,-54,-51,-55,-49,-50,142,-77,-19,81,]),'VAR':([4,12,14,15,16,22,23,33,34,35,36,37,38,39,41,49,52,53,58,59,60,70,71,74,80,81,83,90,91,94,97,98,99,102,103,110,111,112,113,120,121,122,130,140,141,142,160,178,180,181,182,183,187,191,193,194,196,197,198,199,],[10,-24,-46,-47,-48,-79,42,-20,-21,-22,-23,-34,-35,-36,-42,10,-79,-37,-27,-24,-25,-31,-43,10,-29,10,-67,10,42,10,10,10,-25,10,10,-28,-30,-79,42,-32,-24,-39,10,-40,-41,42,-44,10,-99,-80,-81,-82,10,-99,-86,10,-99,-83,-84,-85,]),'VOID':([4,6,7,9,12,14,15,16,17,18,19,22,28,33,34,35,36,37,38,39,41,49,52,53,58,59,60,70,71,80,81,83,90,91,110,111,112,120,121,122,129,140,141,142,143,157,158,160,161,169,],[13,13,21,-25,-24,-46,-47,-48,21,30,30,-79,30,-20,-21,-22,-23,-34,-35,-36,-42,-26,-79,-37,-27,-24,-25,-31,-43,-29,-79,-67,-33,-38,-28,-30,-79,-32,-24,-39,-13,-40,-41,-45,30,30,-14,-44,-57,-56,]),'INT':([4,6,7,9,10,12,13,14,15,16,17,18,19,21,22,28,33,34,35,36,37,38,39,41,42,49,52,53,58,59,60,70,71,80,81,83,90,91,110,111,112,120,121,122,129,140,141,142,143,157,158,160,161,169,],[14,14,14,-25,14,-24,14,-46,-47,-48,14,14,14,14,-79,14,-20,-21,-22,-23,-34,-35,-36,-42,14,-26,-79,-37,-27,-24,-25,-31,-43,-29,-79,-67,-33,-38,-28,-30,-79,-32,-24,-39,-13,-40,-41,-45,14,14,-14,-44,-57,-56,]),'FLOAT':([4,6,7,9,10,12,13,14,15,16,17,18,19,21,22,28,33,34,35,36,37,38,39,41,42,49,52,53,58,59,60,70,71,80,81,83,90,91,110,111,112,120,121,122,129,140,141,142,143,157,158,160,161,169,],[15,15,15,-25,15,-24,15,-46,-47,-48,15,15,15,15,-79,15,-20,-21,-22,-23,-34,-35,-36,-42,15,-26,-79,-37,-27,-24,-25,-31,-43,-29,-79,-67,-33,-38,-28,-30,-79,-32,-24,-39,-13,-40,-41,-45,15,15,-14,-44,-57,-56,]),'CHAR':([4,6,7,9,10,12,13,14,15,16,17,18,19,21,22,28,33,34,35,36,37,38,39,41,42,49,52,53,58,59,60,70,71,80,81,83,90,91,110,111,112,120,121,122,129,140,141,142,143,157,158,160,161,169,],[16,16,16,-25,16,-24,16,-46,-47,-48,16,16,16,16,-79,16,-20,-21,-22,-23,-34,-35,-36,-42,16,-26,-79,-37,-27,-24,-25,-31,-43,-29,-79,-67,-33,-38,-28,-30,-79,-32,-24,-39,-13,-40,-41,-45,16,16,-14,-44,-57,-56,]),'LB':([10,42,55,73,75,76,162,170,177,185,190,192,],[23,23,74,94,102,103,-97,-98,178,187,-97,194,]),'MAIN':([11,14,15,16,20,27,],[25,-46,-47,-48,25,47,]),'IF':([12,14,15,16,22,33,34,35,36,37,38,39,41,49,52,53,58,59,60,70,71,74,80,81,83,90,91,94,97,98,99,102,103,110,111,112,120,121,122,130,140,141,142,160,178,180,181,182,183,187,191,193,194,196,197,198,199,],[-24,-46,-47,-48,-79,-20,-21,-22,-23,-34,-35,-36,-42,-26,-79,-37,-27,-24,-25,-31,-43,101,-29,-79,-67,-33,-38,101,101,101,-25,101,101,-28,-30,-79,-32,-24,-39,101,-40,-41,-45,-44,101,-99,-80,-81,-82,101,-99,-86,101,-99,-83,-84,-85,]),'RB':([12,14,15,16,22,33,34,35,36,37,38,39,41,43,49,52,53,58,59,60,70,71,74,80,81,83,90,91,94,95,97,98,99,102,103,110,111,112,120,121,122,128,130,131,132,135,136,140,141,142,144,160,178,179,180,181,182,183,187,189,191,193,194,195,196,197,198,199,],[-24,-46,-47,-48,-79,-20,-21,-22,-23,-34,-35,-36,-42,53,-26,-79,-37,-27,-24,-25,-31,-43,-79,-29,-79,-67,-33,-38,-79,129,-79,-79,-18,-79,-79,-28,-30,-79,-32,-24,-39,143,-79,-16,-17,157,158,-40,-41,-45,-15,-44,-79,180,-99,-80,-81,-82,-79,191,-99,-86,-79,196,-99,-83,-84,-85,]),'LP':([24,25,26,47,101,184,],[44,45,46,57,134,186,]),'IS':([40,72,100,109,139,],[50,92,133,138,92,]),'COMMA':([40,61,62,64,65,66,69,72,82,118,119,123,124,125,126,127,159,],[51,-51,80,-49,-50,-52,51,93,112,-53,-54,-51,-55,-49,-50,93,80,]),'RP':([44,45,46,54,56,57,77,78,104,106,107,108,114,115,116,117,137,146,147,148,149,150,151,152,153,154,155,156,171,172,173,174,175,176,188,],[-60,55,-60,73,75,76,-75,-76,-78,-72,-73,-74,-68,-69,-70,-71,-77,162,-87,-88,-89,-90,-91,-92,-93,-94,-95,-74,-62,-61,-65,-66,-64,-63,190,]),'CTE_F':([50,79,84,85,86,87,92,133,134,138,163,164,165,166,167,168,186,],[64,107,107,107,107,107,125,125,107,125,107,107,107,107,107,107,107,]),'CTE_I':([50,79,84,85,86,87,92,133,134,138,163,164,165,166,167,168,186,],[65,106,106,106,106,106,126,126,106,126,106,106,106,106,106,106,106,]),'CTE_C':([50,92,133,138,],[66,66,66,66,]),'COMILLA':([50,88,92,133,138,],[67,118,67,67,67,]),'COMILLAS':([50,89,92,133,138,],[68,119,68,68,68,]),'MUL':([61,63,64,65,77,78,104,105,106,107,108,114,115,116,117,137,153,156,171,172,173,174,175,176,],[-74,84,-73,-72,-75,-76,-78,84,-72,-73,-74,-68,-69,84,84,-77,84,-74,84,84,84,84,84,84,]),'DIV':([61,63,64,65,77,78,104,105,106,107,108,114,115,116,117,137,153,156,171,172,173,174,175,176,],[-74,85,-73,-72,-75,-76,-78,85,-72,-73,-74,-68,-69,85,85,-77,85,-74,85,85,85,85,85,85,]),'PLUS':([61,63,64,65,77,78,104,105,106,107,108,114,115,116,117,137,153,156,171,172,173,174,175,176,],[-74,86,-73,-72,-75,-76,-78,86,-72,-73,-74,-68,-69,-70,-71,-77,86,-74,86,86,86,86,86,86,]),'MINUS':([61,63,64,65,77,78,104,105,106,107,108,114,115,116,117,137,153,156,171,172,173,174,175,176,],[-74,87,-73,-72,-75,-76,-78,87,-72,-73,-74,-68,-69,-70,-71,-77,87,-74,87,87,87,87,87,87,]),'LC':([61,77,108,137,156,],[79,79,79,-77,79,]),'RC':([77,78,104,105,106,107,108,114,115,116,117,137,],[-75,-76,-78,137,-72,-73,-74,-68,-69,-70,-71,-77,]),'GT':([77,78,104,106,107,108,114,115,116,117,137,153,156,],[-75,-76,-78,-72,-73,-74,-68,-69,-70,-71,-77,163,-74,]),'LT':([77,78,104,106,107,108,114,115,116,117,137,153,156,],[-75,-76,-78,-72,-73,-74,-68,-69,-70,-71,-77,164,-74,]),'EQUAL':([77,78,104,106,107,108,114,115,116,117,137,153,156,],[-75,-76,-78,-72,-73,-74,-68,-69,-70,-71,-77,165,-74,]),'NEQ':([77,78,104,106,107,108,114,115,116,117,137,153,156,],[-75,-76,-78,-72,-73,-74,-68,-69,-70,-71,-77,166,-74,]),'GEQ':([77,78,104,106,107,108,114,115,116,117,137,153,156,],[-75,-76,-78,-72,-73,-74,-68,-69,-70,-71,-77,167,-74,]),'LEQ':([77,78,104,106,107,108,114,115,116,117,137,153,156,],[-75,-76,-78,-72,-73,-74,-68,-69,-70,-71,-77,168,-74,]),'TRUE':([134,186,],[154,154,]),'FALSE':([134,186,],[155,155,]),'ELSEIF':([180,181,196,197,],[-99,184,-99,184,]),'ELSE':([180,181,196,197,],[-99,185,-99,185,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'programa1':([4,],[5,]),'vars':([4,49,74,81,90,94,97,98,102,103,130,178,187,194,],[6,58,98,111,120,98,98,98,98,98,98,98,98,98,]),'funcion':([4,6,18,19,28,143,157,],[7,17,29,32,48,161,169,]),'main':([4,6,7,17,],[8,18,19,28,]),'empty':([4,22,49,52,74,81,90,94,97,98,102,103,112,130,178,187,194,],[9,41,60,41,99,60,60,99,99,99,99,99,41,99,99,99,99,]),'tipo':([4,6,7,10,13,17,18,19,21,28,42,143,157,],[11,11,20,22,27,20,31,31,27,31,52,31,31,]),'varsG':([4,23,49,74,81,90,91,94,97,98,102,103,113,130,142,178,187,194,],[12,43,59,12,12,121,122,12,12,12,12,12,141,12,160,12,12,12,]),'vars1':([22,],[33,]),'vars2':([22,80,],[34,110,]),'vars3':([22,51,],[35,70,]),'oper_aritmetica':([22,],[36,]),'vars1G':([22,52,],[37,37,]),'vars2G':([22,52,112,],[38,38,140,]),'vars3G':([22,51,52,93,],[39,71,39,71,]),'param':([44,46,],[54,56,]),'value':([50,92,133,138,],[62,124,145,159,]),'expr':([50,79,84,85,86,87,134,163,164,165,166,167,168,186,],[63,105,114,115,116,117,153,171,172,173,174,175,176,153,]),'row':([61,77,108,156,],[77,104,77,77,]),'matrix':([61,108,156,],[78,78,78,]),'check_type':([62,124,],[82,82,]),'statement':([74,94,97,98,102,103,130,178,187,194,],[95,128,131,132,135,136,144,179,189,195,]),'asignacion':([74,94,97,98,102,103,130,178,187,194,],[96,96,96,96,96,96,96,96,96,96,]),'if':([74,94,97,98,102,103,130,178,187,194,],[97,97,97,97,97,97,97,97,97,97,]),'expression':([134,186,],[146,188,]),'var_gt':([134,186,],[147,147,]),'var_lt':([134,186,],[148,148,]),'var_equal':([134,186,],[149,149,]),'var_neq':([134,186,],[150,150,]),'var_geq':([134,186,],[151,151,]),'var_leq':([134,186,],[152,152,]),'check_bool':([162,190,],[170,192,]),'gotof':([170,],[177,]),'guarda_salto':([180,191,196,],[181,193,197,]),'elseif':([181,197,],[182,198,]),'else':([181,197,],[183,199,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> PROGRAM ID SEMICOL programa1','programa',4,'p_programa','parser.py',53),
  ('programa1 -> vars funcion main funcion','programa1',4,'p_programa1','parser.py',61),
  ('programa1 -> funcion main funcion','programa1',3,'p_programa1','parser.py',62),
  ('programa1 -> funcion main','programa1',2,'p_programa1','parser.py',63),
  ('programa1 -> vars funcion main','programa1',3,'p_programa1','parser.py',64),
  ('programa1 -> vars funcion','programa1',2,'p_programa1','parser.py',65),
  ('programa1 -> vars main','programa1',2,'p_programa1','parser.py',66),
  ('programa1 -> vars main funcion','programa1',3,'p_programa1','parser.py',67),
  ('programa1 -> funcion','programa1',1,'p_programa1','parser.py',68),
  ('programa1 -> vars','programa1',1,'p_programa1','parser.py',69),
  ('programa1 -> main','programa1',1,'p_programa1','parser.py',70),
  ('programa1 -> empty','programa1',1,'p_programa1','parser.py',71),
  ('main -> tipo MAIN LP RP LB statement RB','main',7,'p_main','parser.py',78),
  ('main -> VOID tipo MAIN LP RP LB statement RB','main',8,'p_main','parser.py',79),
  ('statement -> asignacion SEMICOL statement','statement',3,'p_statement','parser.py',86),
  ('statement -> if statement','statement',2,'p_statement','parser.py',87),
  ('statement -> vars statement','statement',2,'p_statement','parser.py',88),
  ('statement -> empty','statement',1,'p_statement','parser.py',89),
  ('asignacion -> ID IS value','asignacion',3,'p_asignacion','parser.py',96),
  ('vars -> VAR tipo vars1','vars',3,'p_vars','parser.py',114),
  ('vars -> VAR tipo vars2','vars',3,'p_vars','parser.py',115),
  ('vars -> VAR tipo vars3','vars',3,'p_vars','parser.py',116),
  ('vars -> VAR tipo oper_aritmetica','vars',3,'p_vars','parser.py',117),
  ('vars -> varsG','vars',1,'p_vars','parser.py',118),
  ('vars -> empty','vars',1,'p_vars','parser.py',119),
  ('vars1 -> ID SEMICOL','vars1',2,'p_vars1','parser.py',125),
  ('vars1 -> ID SEMICOL vars','vars1',3,'p_vars1','parser.py',126),
  ('vars2 -> ID IS value COMMA vars2','vars2',5,'p_vars2','parser.py',134),
  ('vars2 -> ID IS value COMMA','vars2',4,'p_vars2','parser.py',135),
  ('vars2 -> ID IS value SEMICOL vars','vars2',5,'p_vars2','parser.py',136),
  ('vars3 -> ID COMMA vars3','vars3',3,'p_vars3','parser.py',162),
  ('vars3 -> ID SEMICOL vars','vars3',3,'p_vars3','parser.py',163),
  ('vars3 -> ID SEMICOL','vars3',2,'p_vars3','parser.py',164),
  ('varsG -> VAR tipo vars1G','varsG',3,'p_varsG','parser.py',212),
  ('varsG -> VAR tipo vars2G','varsG',3,'p_varsG','parser.py',213),
  ('varsG -> VAR tipo vars3G','varsG',3,'p_varsG','parser.py',214),
  ('varsG -> VAR LB varsG RB','varsG',4,'p_varsG','parser.py',215),
  ('vars1G -> ID SEMICOL','vars1G',2,'p_vars1G','parser.py',221),
  ('vars1G -> ID SEMICOL varsG','vars1G',3,'p_vars1G','parser.py',222),
  ('vars2G -> ID IS value check_type COMMA vars2G','vars2G',6,'p_vars2G','parser.py',232),
  ('vars2G -> ID IS value check_type SEMICOL varsG','vars2G',6,'p_vars2G','parser.py',233),
  ('vars2G -> empty','vars2G',1,'p_vars2G','parser.py',234),
  ('vars3G -> ID COMMA vars3G','vars3G',3,'p_vars3G','parser.py',255),
  ('vars3G -> ID SEMICOL varsG','vars3G',3,'p_vars3G','parser.py',256),
  ('vars3G -> ID SEMICOL','vars3G',2,'p_vars3G','parser.py',257),
  ('tipo -> INT','tipo',1,'p_tipo','parser.py',295),
  ('tipo -> FLOAT','tipo',1,'p_tipo','parser.py',296),
  ('tipo -> CHAR','tipo',1,'p_tipo','parser.py',297),
  ('value -> CTE_F','value',1,'p_value_constantes','parser.py',309),
  ('value -> CTE_I','value',1,'p_value_constantes','parser.py',310),
  ('value -> ID','value',1,'p_value_id','parser.py',328),
  ('value -> CTE_C','value',1,'p_value_char','parser.py',334),
  ('value -> COMILLA ID COMILLA','value',3,'p_value_char2','parser.py',340),
  ('value -> COMILLAS ID COMILLAS','value',3,'p_value_char2','parser.py',341),
  ('check_type -> <empty>','check_type',0,'p_check_type','parser.py',350),
  ('funcion -> VOID ID LP param RP LB statement RB funcion','funcion',9,'p_funcion','parser.py',366),
  ('funcion -> tipo ID LP param RP LB statement RB funcion','funcion',9,'p_funcion','parser.py',367),
  ('funcion -> VOID ID LP param RP LB statement RB','funcion',8,'p_funcion','parser.py',368),
  ('funcion -> tipo ID LP param RP LB statement RB','funcion',8,'p_funcion','parser.py',369),
  ('param -> <empty>','param',0,'p_param','parser.py',379),
  ('var_lt -> expr LT expr','var_lt',3,'p_LT','parser.py',399),
  ('var_gt -> expr GT expr','var_gt',3,'p_GT','parser.py',415),
  ('var_leq -> expr LEQ expr','var_leq',3,'p_LEQ','parser.py',429),
  ('var_geq -> expr GEQ expr','var_geq',3,'p_GEQ','parser.py',443),
  ('var_equal -> expr EQUAL expr','var_equal',3,'p_EQUAL','parser.py',457),
  ('var_neq -> expr NEQ expr','var_neq',3,'p_NEQ','parser.py',471),
  ('oper_aritmetica -> ID IS expr SEMICOL','oper_aritmetica',4,'p_oper_aritmetica','parser.py',494),
  ('expr -> expr MUL expr','expr',3,'p_expr','parser.py',505),
  ('expr -> expr DIV expr','expr',3,'p_expr','parser.py',506),
  ('expr -> expr PLUS expr','expr',3,'p_expr','parser.py',507),
  ('expr -> expr MINUS expr','expr',3,'p_expr','parser.py',508),
  ('expr -> CTE_I','expr',1,'p_expression_int_float','parser.py',553),
  ('expr -> CTE_F','expr',1,'p_expression_int_float','parser.py',554),
  ('expr -> ID','expr',1,'p_expression_var','parser.py',563),
  ('expr -> ID row','expr',2,'p_expression_var','parser.py',564),
  ('expr -> ID matrix','expr',2,'p_expression_var','parser.py',565),
  ('row -> LC expr RC','row',3,'p_row','parser.py',587),
  ('matrix -> row row','matrix',2,'p_matrix','parser.py',593),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',613),
  ('if -> IF LP expression RP check_bool gotof LB statement RB guarda_salto','if',10,'p_if','parser.py',624),
  ('if -> IF LP expression RP check_bool gotof LB statement RB guarda_salto elseif','if',11,'p_if','parser.py',625),
  ('if -> IF LP expression RP check_bool gotof LB statement RB guarda_salto else','if',11,'p_if','parser.py',626),
  ('elseif -> ELSEIF LP expression RP check_bool LB statement RB guarda_salto','elseif',9,'p_elseif','parser.py',632),
  ('elseif -> ELSEIF LP expression RP check_bool LB statement RB guarda_salto elseif','elseif',10,'p_elseif','parser.py',633),
  ('elseif -> ELSEIF LP expression RP check_bool LB statement RB guarda_salto else','elseif',10,'p_elseif','parser.py',634),
  ('else -> ELSE LB statement RB guarda_salto','else',5,'p_else','parser.py',639),
  ('expression -> var_gt','expression',1,'p_expression','parser.py',649),
  ('expression -> var_lt','expression',1,'p_expression','parser.py',650),
  ('expression -> var_equal','expression',1,'p_expression','parser.py',651),
  ('expression -> var_neq','expression',1,'p_expression','parser.py',652),
  ('expression -> var_geq','expression',1,'p_expression','parser.py',653),
  ('expression -> var_leq','expression',1,'p_expression','parser.py',654),
  ('expression -> expr','expression',1,'p_expression','parser.py',655),
  ('expression -> TRUE','expression',1,'p_expression','parser.py',656),
  ('expression -> FALSE','expression',1,'p_expression','parser.py',657),
  ('expression -> ID','expression',1,'p_expression','parser.py',658),
  ('check_bool -> <empty>','check_bool',0,'p_check_bool','parser.py',664),
  ('gotof -> <empty>','gotof',0,'p_gotof','parser.py',673),
  ('guarda_salto -> <empty>','guarda_salto',0,'p_guarda_salto','parser.py',679),
]
