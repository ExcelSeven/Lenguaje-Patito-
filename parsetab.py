
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULDIVAND BEGIN BOOL CHAR COL COMILLA COMILLAS COMMA CONST CTE_B CTE_C CTE_F CTE_I CTE_S DETERMATRIZ DIV DO DOT ELIF ELSE ELSEIF END EOF EQUAL FALSE FLOAT FOR FUNC GEQ GLOBAL GT ID IF INPUT INT INVERMATRIZ IS LB LC LEQ LET LOCAL LP LT MAIN MINUS MUL NEQ NOT OR PLUS PRINT PROGRAM RB RC READ RETURN RP SELECT SEMICOL SWITCH THEN TRANSMATRIZ TRUE VAR VOID WHILE\n    programa : PROGRAM ID SEMICOL programa1\n    \n    programa1 : varsG quad_main funciones end\n              | varsG quad_main funciones main funciones end\n              | varsG quad_main main funciones end\n              | varsG end\n              | quad_main main end\n              | funciones end\n\n    \n    funciones : funcion\n\n    \n    funciones : funciones funcion\n\n    \n    funciones : empty\n\n    \n    main : tipo MAIN quad_main2 LP RP LB statement func_return_main RB\n         | VOID MAIN quad_main2 LP RP LB statement RB\n    \n    quad_main :\n\n    \n    quad_main2 :\n\n    \n    statement : asignacion SEMICOL statement\n              | if statement\n              | vars statement\n              | while statement\n              | for statement\n              | escritura statement\n              | escritura_var statement\n              | lectura statement\n              | func_call statement\n              | ID row SEMICOL\n              | ID matrix SEMICOL\n              | empty\n    \n    asignacion : ID IS value\n\n    \n    vars : VAR tipo vars1\n         | VAR tipo vars2\n         | VAR tipo vars3\n         | VAR tipo oper_aritmetica\n         | VAR tipo ID row SEMICOL\n         | VAR tipo ID matrix SEMICOL\n         | var_row\n         | var_row vars\n         | var_matrix\n         | var_matrix vars\n         | empty\n    \n    vars1 : ID SEMICOL\n\n    \n    vars2 : vars2_1 ID IS value SEMICOL\n\n    \n    vars2_1 : vars2_1 ID IS value COMMA\n\n    \n    vars2_1 :  ID IS value COMMA\n\n    \n    vars2_1 :  empty\n\n    \n    vars2 :  ID IS value SEMICOL\n\n    \n    vars3 : vars3_1 ID SEMICOL\n    \n    vars3_1 : vars3_1 ID COMMA\n    \n    vars3_1 : ID COMMA\n    \n    vars3 : ID SEMICOL\n    \n    vars3_1 : empty\n    \n    varsG : VAR tipo vars1G varsG\n         | VAR tipo vars2G varsG\n         | VAR tipo vars3G varsG\n         | VAR LB varsG RB\n         | var_rowG\n         | var_rowG varsG\n         | var_matrixG\n         | var_matrixG varsG\n         | declarar_func varsG\n         | declarar_func\n         | empty\n\n    \n    vars1G : ID SEMICOL\n\n    \n    vars2G : vars2_1G ID IS value SEMICOL\n\n    \n    vars2_1G : vars2_1G ID IS value COMMA\n\n    \n    vars2_1G :  ID IS value COMMA\n\n    \n    vars2_1G :  empty\n\n    \n    vars2G :  ID IS value SEMICOL\n\n    \n    vars3G : vars3_1G ID SEMICOL\n    \n    vars3_1G : vars3_1G ID COMMA\n    \n    vars3_1G : ID COMMA\n    \n    vars3G : ID SEMICOL\n    \n    vars3_1G : empty\n    \n    tipo : INT\n        | FLOAT\n        | CHAR\n    \n    value : CTE_F\n          | CTE_I\n    \n    value : ID\n    \n    value : CTE_C\n    \n    value : COMILLA ID COMILLA\n          | COMILLAS ID COMILLAS\n    \n    check_type :\n    \n    add_fun :\n\n    \n    funcion :  VOID ID add_fun LP param RP verificar LB var_func statement RB end_func\n\n    \n    funcion :  VOID ID add_fun LP RP verificar2 LB var_func statement RB end_func\n\n    \n    funcion :  tipo ID add_fun LP RP verificar2 LB var_func statement add_func_dir2 func_return RB end_func\n\n    \n    funcion :   tipo ID add_fun LP param RP verificar LB var_func statement add_func_dir func_return_param RB end_func\n\n    \n    verificar :\n    \n    verificar2 :\n\n    \n    add_func_dir :\n    \n    add_func_dir2 :\n\n    \n    var_func : vars\n\n    \n    param : tipo ID\n\n    \n    param : param COMMA tipo ID\n\n    \n    param : empty\n\n    \n    declarar_func : FUNC tipo ID LP RP SEMICOL\n                  | FUNC VOID ID LP RP SEMICOL\n\n    \n    declarar_func : FUNC tipo ID LP declarar_param RP SEMICOL\n                  | FUNC VOID ID LP declarar_param RP SEMICOL\n\n    \n    declarar_param : tipo COMMA declarar_param\n\n    \n    declarar_param : tipo declarar_param\n\n    \n    declarar_param : empty\n\n    \n    end_func :\n\n    \n    func_call : ID LP RP SEMICOL\n\n    \n    func_call : ID LP func_era func_call_param RP SEMICOL\n\n    \n    func_era :\n\n    \n    func_call_param : expr\n\n    \n    func_call_param : func_call_param COMMA expr\n\n    \n    func_return : RETURN expr SEMICOL\n\n    \n    func_return_param : RETURN expr SEMICOL\n\n    \n    func_return_main : RETURN expr SEMICOL\n\n    \n    end :\n    \n    var_row : VAR tipo ID row IS LP lista2 RP SEMICOL\n\n    \n    var_rowG : VAR tipo ID row IS LP lista2 RP SEMICOL\n\n    \n    elem_lista : value\n               | empty\n\n    \n    lista2 : elem_lista COMMA lista2\n           | elem_lista COMMA elem_lista\n\n    \n    row       : LC CTE_I RC\n\n    \n    var_matrix : VAR tipo ID matrix IS matrix2 SEMICOL\n\n    \n    var_matrixG : VAR tipo ID matrix IS matrix2 SEMICOL\n\n    \n    matrix2 : LP lista2 RP COMMA matrix2\n\n    \n    matrix2 : LP lista2 RP COMMA LP lista2 RP\n\n    \n    row_list : row COMMA row_list\n             | row COMMA row\n    \n    matrix    : row row\n\n    \n    empty :\n    \n    if : IF LP expression RP check_bool gotof LB statement RB fill_if\n        | IF LP expression RP check_bool gotof LB statement RB goto fill_gotof else\n    \n    else : ELSE guarda_num_salto LB statement RB fill_goto_else\n\n    \n    goto :\n\n    \n    gotof :\n\n    \n    fill_goto_else :\n\n    \n    fill_gotof :\n\n    \n    fill_gotof2 :\n\n    \n    fill_if :\n\n    \n    guarda_num_salto :\n\n    \n    while : WHILE guarda_num_salto LP expression RP check_bool gotof LB statement RB goto\n\n    \n    for : FOR LP VAR tipo ID IS value SEMICOL expression check_bool gotof_for SEMICOL ID opers RP LB statement RB goto\n\n    \n    gotof_for :\n\n    \n    opers : IS value\n          | PLUS IS value\n          | MINUS IS value\n          | DIV IS value\n          | MUL IS value\n          | PLUS PLUS\n          | MINUS MINUS\n\n    \n    escritura : PRINT LP COMILLA any COMILLA RP SEMICOL\n              | PRINT LP COMILLAS any COMILLAS RP SEMICOL\n\n    \n    escritura_var : PRINT LP any_var RP SEMICOL\n\n    \n    any_var : ID\n\n    \n    any : expr any\n        | expression any\n\n    \n    any : empty\n\n    \n    lectura : READ LP COMILLA any_lectura COMILLA RP SEMICOL\n            | READ LP COMILLAS any_lectura COMILLAS RP SEMICOL\n\n    \n    any_lectura : ID\n\n    \n    expression : var_gt\n               | var_lt\n               | var_equal\n               | var_neq\n               | var_geq\n               | var_leq\n               | expr\n               | TRUE\n               | FALSE\n               | ID\n    \n    var_lt : expr LT expr\n    \n    var_gt : expr GT expr\n    \n    var_leq : expr LEQ expr\n    \n    var_geq : expr GEQ expr\n    \n    var_equal : expr EQUAL expr\n    \n    var_neq : expr NEQ expr\n    \n    oper_aritmetica : ID IS expr SEMICOL\n\n    \n    expr : expr MUL expr\n         | expr DIV expr\n         | expr PLUS expr\n         | expr MINUS expr\n    \n    expr : CTE_I\n         | CTE_F\n\n    \n    expr : ID\n    \n    check_bool :\n\n    '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,4,5,6,8,11,12,13,14,15,21,22,23,26,27,31,32,33,34,38,39,40,43,46,47,48,58,59,60,63,64,65,68,74,79,80,95,109,113,127,129,141,143,149,150,207,208,216,259,298,299,335,339,355,357,370,],[0,-126,-1,-13,-111,-54,-56,-59,-10,-8,-126,-5,-111,-7,-9,-55,-60,-57,-58,-111,-126,-10,-6,-126,-126,-126,-2,-126,-111,-50,-51,-52,-61,-53,-111,-4,-67,-3,-66,-95,-96,-120,-62,-97,-98,-12,-113,-11,-102,-102,-84,-102,-83,-85,-102,-86,]),'ID':([2,10,17,18,19,20,28,35,36,41,42,50,51,52,67,70,90,91,94,96,97,112,114,118,133,134,144,145,147,152,155,156,157,158,159,160,161,162,164,167,168,175,177,178,179,180,182,183,185,186,197,198,199,200,201,202,205,213,214,218,219,220,226,228,229,230,231,232,233,235,236,238,239,240,241,243,244,245,246,248,249,252,253,254,261,262,263,264,265,269,270,271,272,273,274,276,278,279,283,285,286,288,296,300,301,302,303,305,307,308,309,310,311,312,313,315,322,323,324,331,338,340,343,345,346,347,350,359,361,362,363,366,367,368,369,374,375,376,377,380,382,385,387,389,392,393,403,405,406,407,408,409,414,416,417,],[3,30,37,-72,-73,-74,49,55,56,30,37,72,73,-65,85,-69,115,116,85,-68,121,85,-64,85,163,163,-63,-126,181,-126,163,163,163,163,163,163,163,163,-38,-34,-36,85,163,-91,-38,-126,-126,163,220,163,85,-105,237,242,-35,-37,251,163,163,-178,-179,-180,220,-157,-158,-159,-160,-161,-162,-164,-165,-28,-29,-30,-31,280,281,-43,237,288,288,292,292,85,220,220,220,220,-103,220,220,220,220,220,220,-39,317,-47,326,288,288,-166,220,-174,-175,-176,-177,220,-168,-167,-171,-172,-170,-169,-32,-33,85,-45,-46,-149,220,-104,85,-44,-42,-173,85,163,-119,-40,-41,-147,-148,-154,-155,163,237,-135,-112,-127,-130,-137,-128,391,163,85,85,85,85,85,-132,163,-129,-130,-138,]),'SEMICOL':([3,49,73,83,85,86,87,88,89,102,105,117,119,120,128,130,139,140,154,174,195,196,217,218,219,220,224,225,228,229,230,231,232,233,234,235,236,237,242,255,275,277,281,290,300,301,302,303,304,307,308,309,310,311,312,317,318,319,320,321,334,336,344,348,351,352,353,354,358,365,373,379,383,386,],[4,68,95,-125,-77,113,-75,-76,-78,127,129,141,-118,143,149,150,-79,-80,186,208,222,223,260,-178,-179,-180,-27,265,-157,-158,-159,-160,-161,-162,-163,-164,-165,-166,276,-121,313,315,323,331,-174,-175,-176,-177,340,-168,-167,-171,-172,-170,-169,-77,345,347,-75,-76,-122,356,361,362,366,367,368,369,371,375,377,-181,-139,389,]),'VAR':([4,11,12,13,29,46,47,48,68,95,113,127,129,133,134,141,143,145,149,150,152,155,156,157,158,159,160,161,162,164,167,168,177,178,179,180,182,183,186,201,202,204,208,213,214,238,239,240,241,265,276,313,315,323,331,340,345,347,359,361,362,366,367,368,369,374,376,377,380,382,385,387,392,408,409,414,416,417,],[9,9,9,9,9,9,9,9,-61,-67,-66,-95,-96,166,166,-120,-62,166,-97,-98,166,166,166,166,166,166,166,166,166,-38,166,166,166,-91,-38,166,166,166,166,-35,-37,247,-113,166,166,-28,-29,-30,-31,-103,-39,-32,-33,-45,-149,-104,-44,-173,166,-119,-40,-147,-148,-154,-155,166,-135,-112,-127,-130,-137,-128,166,-132,166,-129,-130,-138,]),'VOID':([4,6,7,8,11,12,13,14,15,16,21,27,31,32,33,34,38,39,40,46,47,48,59,60,63,64,65,68,74,79,95,113,127,129,141,143,149,150,207,208,216,259,298,299,335,339,355,357,370,],[17,-13,25,17,-54,-56,-59,-10,-8,36,42,-9,-55,-60,-57,-58,42,17,-10,-126,-126,-126,17,17,-50,-51,-52,-61,-53,17,-67,-66,-95,-96,-120,-62,-97,-98,-12,-113,-11,-102,-102,-84,-102,-83,-85,-102,-86,]),'INT':([4,6,7,8,9,11,12,13,14,15,16,18,19,20,21,27,31,32,33,34,38,39,40,46,47,48,59,60,63,64,65,68,74,75,76,77,78,79,95,101,113,124,125,127,129,141,143,149,150,166,207,208,216,247,259,298,299,335,339,355,357,370,],[18,-13,18,18,18,-54,-56,-59,-10,-8,18,-72,-73,-74,18,-9,-55,-60,-57,-58,18,18,-10,-126,-126,-126,18,18,-50,-51,-52,-61,-53,18,18,18,18,18,-67,18,-66,18,18,-95,-96,-120,-62,-97,-98,18,-12,-113,-11,18,-102,-102,-84,-102,-83,-85,-102,-86,]),'FLOAT':([4,6,7,8,9,11,12,13,14,15,16,18,19,20,21,27,31,32,33,34,38,39,40,46,47,48,59,60,63,64,65,68,74,75,76,77,78,79,95,101,113,124,125,127,129,141,143,149,150,166,207,208,216,247,259,298,299,335,339,355,357,370,],[19,-13,19,19,19,-54,-56,-59,-10,-8,19,-72,-73,-74,19,-9,-55,-60,-57,-58,19,19,-10,-126,-126,-126,19,19,-50,-51,-52,-61,-53,19,19,19,19,19,-67,19,-66,19,19,-95,-96,-120,-62,-97,-98,19,-12,-113,-11,19,-102,-102,-84,-102,-83,-85,-102,-86,]),'CHAR':([4,6,7,8,9,11,12,13,14,15,16,18,19,20,21,27,31,32,33,34,38,39,40,46,47,48,59,60,63,64,65,68,74,75,76,77,78,79,95,101,113,124,125,127,129,141,143,149,150,166,207,208,216,247,259,298,299,335,339,355,357,370,],[20,-13,20,20,20,-54,-56,-59,-10,-8,20,-72,-73,-74,20,-9,-55,-60,-57,-58,20,20,-10,-126,-126,-126,20,20,-50,-51,-52,-61,-53,20,20,20,20,20,-67,20,-66,20,20,-95,-96,-120,-62,-97,-98,20,-12,-113,-11,20,-102,-102,-84,-102,-83,-85,-102,-86,]),'FUNC':([4,11,12,13,29,46,47,48,68,95,113,127,129,141,143,149,150,208,],[16,16,16,16,16,16,16,16,-61,-67,-66,-95,-96,-120,-62,-97,-98,-113,]),'LB':([9,98,108,110,111,122,123,131,132,146,151,268,306,325,342,349,364,388,390,401,],[29,-88,-88,133,134,145,-87,-87,152,180,182,-181,-131,-181,359,-131,374,-136,392,409,]),'RB':([11,12,13,29,31,32,33,34,46,47,48,53,63,64,65,68,74,95,113,127,129,134,141,143,149,150,152,155,156,157,158,159,160,161,162,164,167,168,173,178,179,182,183,184,186,187,188,189,190,191,192,193,194,201,202,208,214,215,221,222,223,238,239,240,241,258,260,265,276,295,313,315,323,331,337,340,345,347,356,359,361,362,366,367,368,369,371,372,374,376,377,378,380,382,385,387,392,399,408,409,414,415,416,417,],[-54,-56,-59,-126,-55,-60,-57,-58,-126,-126,-126,74,-50,-51,-52,-61,-53,-67,-66,-95,-96,-126,-120,-62,-97,-98,-126,-126,-126,-126,-126,-126,-126,-126,-126,-26,-34,-36,207,-91,-38,-126,-126,216,-126,-16,-17,-18,-19,-20,-21,-22,-23,-35,-37,-113,-126,259,-15,-24,-25,-28,-29,-30,-31,298,-110,-103,-39,335,-32,-33,-45,-149,357,-104,-44,-173,-108,-126,-119,-40,-147,-148,-154,-155,-109,376,-126,-135,-112,382,-127,-130,-137,-128,-126,408,-132,-126,-129,416,-130,-138,]),'MAIN':([18,19,20,24,25,41,42,],[-72,-73,-74,44,45,44,45,]),'COMMA':([18,19,20,49,73,75,78,85,86,87,88,89,99,100,101,107,112,118,120,121,136,137,138,139,140,175,176,181,209,218,219,220,242,254,266,267,281,300,301,302,303,317,318,320,321,334,341,343,348,],[-72,-73,-74,70,96,-126,-126,-77,114,-75,-76,-78,124,-94,125,124,-126,-126,144,-92,175,-114,-115,-79,-80,-126,211,-93,175,-178,-179,-180,279,-126,305,-106,324,-174,-175,-176,-177,-77,346,-75,-76,211,-107,-126,363,]),'RP':([18,19,20,75,76,77,78,81,82,85,87,88,89,99,100,101,103,104,106,107,121,125,126,135,137,138,139,140,142,148,175,181,198,209,210,218,219,220,227,228,229,230,231,232,233,234,235,236,237,250,251,266,267,282,294,300,301,302,303,307,308,309,310,311,312,327,330,332,333,341,360,394,400,402,404,410,411,412,413,],[-72,-73,-74,98,102,105,108,110,111,-77,-75,-76,-78,123,-94,-126,128,-101,130,131,-92,-126,-100,174,-114,-115,-79,-80,176,-99,-126,-93,225,-117,-116,-178,-179,-180,268,-157,-158,-159,-160,-161,-162,-163,-164,-165,-166,290,-150,304,-106,325,334,-174,-175,-176,-177,-168,-167,-171,-172,-170,-169,351,352,353,354,-107,373,401,-140,-145,-146,-141,-142,-143,-144,]),'LP':([30,37,44,45,54,55,56,57,61,62,84,92,163,165,169,170,171,172,203,211,314,316,],[-82,-82,-14,-14,75,76,77,78,81,82,112,118,198,199,-136,204,205,206,246,254,343,118,]),'IS':([49,66,69,72,83,119,163,242,275,277,280,326,391,395,396,397,398,],[67,84,92,94,-125,-118,197,278,314,316,322,350,393,403,405,406,407,]),'LC':([49,66,119,163,195,242,275,],[71,71,-118,71,71,71,71,]),'CTE_F':([67,94,112,118,175,185,197,198,199,218,219,220,226,228,229,230,231,232,233,235,236,246,248,249,254,261,262,263,264,269,270,271,272,273,274,278,285,286,288,296,300,301,302,303,305,307,308,309,310,311,312,322,338,343,350,375,393,403,405,406,407,],[87,87,87,87,87,219,87,-105,219,-178,-179,-180,219,-157,-158,-159,-160,-161,-162,-164,-165,219,219,219,87,219,219,219,219,219,219,219,219,219,219,320,219,219,-166,219,-174,-175,-176,-177,219,-168,-167,-171,-172,-170,-169,87,219,87,87,219,87,87,87,87,87,]),'CTE_I':([67,71,94,112,118,175,185,197,198,199,218,219,220,226,228,229,230,231,232,233,235,236,246,248,249,254,261,262,263,264,269,270,271,272,273,274,278,285,286,288,296,300,301,302,303,305,307,308,309,310,311,312,322,338,343,350,375,393,403,405,406,407,],[88,93,88,88,88,88,218,88,-105,218,-178,-179,-180,218,-157,-158,-159,-160,-161,-162,-164,-165,218,218,218,88,218,218,218,218,218,218,218,218,218,218,321,218,218,-166,218,-174,-175,-176,-177,218,-168,-167,-171,-172,-170,-169,88,218,88,88,218,88,88,88,88,88,]),'CTE_C':([67,94,112,118,175,197,254,278,322,343,350,393,403,405,406,407,],[89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'COMILLA':([67,94,112,115,118,175,197,205,206,218,219,220,228,229,230,231,232,233,235,236,248,254,278,284,285,286,287,288,291,292,300,301,302,303,307,308,309,310,311,312,322,328,329,343,350,393,403,405,406,407,],[90,90,90,139,90,90,90,248,252,-178,-179,-180,-157,-158,-159,-160,-161,-162,-164,-165,-126,90,90,327,-126,-126,-153,-166,332,-156,-174,-175,-176,-177,-168,-167,-171,-172,-170,-169,90,-151,-152,90,90,90,90,90,90,90,]),'COMILLAS':([67,94,112,116,118,175,197,205,206,218,219,220,228,229,230,231,232,233,235,236,249,254,278,285,286,287,288,289,292,293,300,301,302,303,307,308,309,310,311,312,322,328,329,343,350,393,403,405,406,407,],[91,91,91,140,91,91,91,249,253,-178,-179,-180,-157,-158,-159,-160,-161,-162,-164,-165,-126,91,91,-126,-126,-153,-166,330,-156,333,-174,-175,-176,-177,-168,-167,-171,-172,-170,-169,91,-151,-152,91,91,91,91,91,91,91,]),'RC':([93,],[119,]),'IF':([133,134,145,152,155,156,157,158,159,160,161,162,164,167,168,177,178,179,180,182,183,186,201,202,213,214,238,239,240,241,265,276,313,315,323,331,340,345,347,359,361,362,366,367,368,369,374,376,377,380,382,385,387,392,408,409,414,416,417,],[165,165,-126,-126,165,165,165,165,165,165,165,165,-38,-34,-36,165,-91,-38,-126,-126,165,165,-35,-37,165,165,-28,-29,-30,-31,-103,-39,-32,-33,-45,-149,-104,-44,-173,165,-119,-40,-147,-148,-154,-155,165,-135,-112,-127,-130,-137,-128,165,-132,165,-129,-130,-138,]),'WHILE':([133,134,145,152,155,156,157,158,159,160,161,162,164,167,168,177,178,179,180,182,183,186,201,202,213,214,238,239,240,241,265,276,313,315,323,331,340,345,347,359,361,362,366,367,368,369,374,376,377,380,382,385,387,392,408,409,414,416,417,],[169,169,-126,-126,169,169,169,169,169,169,169,169,-38,-34,-36,169,-91,-38,-126,-126,169,169,-35,-37,169,169,-28,-29,-30,-31,-103,-39,-32,-33,-45,-149,-104,-44,-173,169,-119,-40,-147,-148,-154,-155,169,-135,-112,-127,-130,-137,-128,169,-132,169,-129,-130,-138,]),'FOR':([133,134,145,152,155,156,157,158,159,160,161,162,164,167,168,177,178,179,180,182,183,186,201,202,213,214,238,239,240,241,265,276,313,315,323,331,340,345,347,359,361,362,366,367,368,369,374,376,377,380,382,385,387,392,408,409,414,416,417,],[170,170,-126,-126,170,170,170,170,170,170,170,170,-38,-34,-36,170,-91,-38,-126,-126,170,170,-35,-37,170,170,-28,-29,-30,-31,-103,-39,-32,-33,-45,-149,-104,-44,-173,170,-119,-40,-147,-148,-154,-155,170,-135,-112,-127,-130,-137,-128,170,-132,170,-129,-130,-138,]),'PRINT':([133,134,145,152,155,156,157,158,159,160,161,162,164,167,168,177,178,179,180,182,183,186,201,202,213,214,238,239,240,241,265,276,313,315,323,331,340,345,347,359,361,362,366,367,368,369,374,376,377,380,382,385,387,392,408,409,414,416,417,],[171,171,-126,-126,171,171,171,171,171,171,171,171,-38,-34,-36,171,-91,-38,-126,-126,171,171,-35,-37,171,171,-28,-29,-30,-31,-103,-39,-32,-33,-45,-149,-104,-44,-173,171,-119,-40,-147,-148,-154,-155,171,-135,-112,-127,-130,-137,-128,171,-132,171,-129,-130,-138,]),'READ':([133,134,145,152,155,156,157,158,159,160,161,162,164,167,168,177,178,179,180,182,183,186,201,202,213,214,238,239,240,241,265,276,313,315,323,331,340,345,347,359,361,362,366,367,368,369,374,376,377,380,382,385,387,392,408,409,414,416,417,],[172,172,-126,-126,172,172,172,172,172,172,172,172,-38,-34,-36,172,-91,-38,-126,-126,172,172,-35,-37,172,172,-28,-29,-30,-31,-103,-39,-32,-33,-45,-149,-104,-44,-173,172,-119,-40,-147,-148,-154,-155,172,-135,-112,-127,-130,-137,-128,172,-132,172,-129,-130,-138,]),'RETURN':([133,145,153,155,156,157,158,159,160,161,162,164,167,168,177,178,179,180,186,187,188,189,190,191,192,193,194,201,202,212,213,221,222,223,238,239,240,241,256,257,265,276,297,313,315,323,331,340,345,347,361,362,366,367,368,369,376,377,380,382,385,387,408,414,416,417,],[-126,-126,185,-126,-126,-126,-126,-126,-126,-126,-126,-26,-34,-36,-126,-91,-38,-126,-126,-16,-17,-18,-19,-20,-21,-22,-23,-35,-37,-90,-126,-15,-24,-25,-28,-29,-30,-31,296,-89,-103,-39,338,-32,-33,-45,-149,-104,-44,-173,-119,-40,-147,-148,-154,-155,-135,-112,-127,-130,-137,-128,-132,-129,-130,-138,]),'TRUE':([199,218,219,220,228,229,230,231,232,233,235,236,246,248,249,285,286,288,300,301,302,303,307,308,309,310,311,312,375,],[235,-178,-179,-180,-157,-158,-159,-160,-161,-162,-164,-165,235,235,235,235,235,-166,-174,-175,-176,-177,-168,-167,-171,-172,-170,-169,235,]),'FALSE':([199,218,219,220,228,229,230,231,232,233,235,236,246,248,249,285,286,288,300,301,302,303,307,308,309,310,311,312,375,],[236,-178,-179,-180,-157,-158,-159,-160,-161,-162,-164,-165,236,236,236,236,236,-166,-174,-175,-176,-177,-168,-167,-171,-172,-170,-169,236,]),'MUL':([217,218,219,220,234,237,267,285,288,300,301,302,303,307,308,309,310,311,312,317,319,320,321,336,341,358,391,],[261,-178,-179,-180,261,-180,261,261,-180,-174,-175,261,261,261,261,261,261,261,261,-180,261,-179,-178,261,261,261,398,]),'DIV':([217,218,219,220,234,237,267,285,288,300,301,302,303,307,308,309,310,311,312,317,319,320,321,336,341,358,391,],[262,-178,-179,-180,262,-180,262,262,-180,-174,-175,262,262,262,262,262,262,262,262,-180,262,-179,-178,262,262,262,397,]),'PLUS':([217,218,219,220,234,237,267,285,288,300,301,302,303,307,308,309,310,311,312,317,319,320,321,336,341,358,391,395,],[263,-178,-179,-180,263,-180,263,263,-180,-174,-175,-176,-177,263,263,263,263,263,263,-180,263,-179,-178,263,263,263,395,402,]),'MINUS':([217,218,219,220,234,237,267,285,288,300,301,302,303,307,308,309,310,311,312,317,319,320,321,336,341,358,391,396,],[264,-178,-179,-180,264,-180,264,264,-180,-174,-175,-176,-177,264,264,264,264,264,264,-180,264,-179,-178,264,264,264,396,404,]),'GT':([218,219,220,234,237,285,288,300,301,302,303,],[-178,-179,-180,269,-180,269,-180,-174,-175,-176,-177,]),'LT':([218,219,220,234,237,285,288,300,301,302,303,],[-178,-179,-180,270,-180,270,-180,-174,-175,-176,-177,]),'EQUAL':([218,219,220,234,237,285,288,300,301,302,303,],[-178,-179,-180,271,-180,271,-180,-174,-175,-176,-177,]),'NEQ':([218,219,220,234,237,285,288,300,301,302,303,],[-178,-179,-180,272,-180,272,-180,-174,-175,-176,-177,]),'GEQ':([218,219,220,234,237,285,288,300,301,302,303,],[-178,-179,-180,273,-180,273,-180,-174,-175,-176,-177,]),'LEQ':([218,219,220,234,237,285,288,300,301,302,303,],[-178,-179,-180,274,-180,274,-180,-174,-175,-176,-177,]),'ELSE':([376,381,384,],[-130,-133,388,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'programa1':([4,],[5,]),'varsG':([4,11,12,13,29,46,47,48,],[6,31,33,34,53,63,64,65,]),'quad_main':([4,6,],[7,21,]),'funciones':([4,21,39,59,],[8,38,60,79,]),'tipo':([4,7,8,9,16,21,38,39,59,60,75,76,77,78,79,101,124,125,166,247,],[10,24,10,28,35,41,41,10,10,10,97,101,101,97,10,101,147,101,200,283,]),'var_rowG':([4,11,12,13,29,46,47,48,],[11,11,11,11,11,11,11,11,]),'var_matrixG':([4,11,12,13,29,46,47,48,],[12,12,12,12,12,12,12,12,]),'declarar_func':([4,11,12,13,29,46,47,48,],[13,13,13,13,13,13,13,13,]),'empty':([4,11,12,13,21,28,29,39,46,47,48,59,75,76,77,78,101,112,118,125,133,134,145,152,155,156,157,158,159,160,161,162,167,168,175,177,180,182,183,186,200,213,214,248,249,254,285,286,343,359,374,392,409,],[14,32,32,32,40,52,32,40,32,32,32,40,100,104,104,100,104,138,138,104,164,164,179,179,164,164,164,164,164,164,164,164,179,179,138,164,179,179,164,164,245,164,164,287,287,138,287,287,138,164,164,164,164,]),'funcion':([4,8,21,38,39,59,60,79,],[15,27,15,27,15,15,27,27,]),'end':([6,8,23,38,60,79,],[22,26,43,58,80,109,]),'main':([7,21,38,],[23,39,59,]),'vars1G':([28,],[46,]),'vars2G':([28,],[47,]),'vars3G':([28,],[48,]),'vars2_1G':([28,],[50,]),'vars3_1G':([28,],[51,]),'add_fun':([30,37,],[54,57,]),'quad_main2':([44,45,],[61,62,]),'row':([49,66,163,195,242,275,],[66,83,195,83,275,83,]),'matrix':([49,163,242,],[69,196,277,]),'value':([67,94,112,118,175,197,254,278,322,343,350,393,403,405,406,407,],[86,120,137,137,137,224,137,318,348,137,365,400,410,411,412,413,]),'param':([75,78,],[99,107,]),'declarar_param':([76,77,101,125,],[103,106,126,148,]),'matrix2':([92,211,316,],[117,255,344,]),'verificar2':([98,108,],[122,132,]),'lista2':([112,118,175,254,343,],[135,142,210,294,360,]),'elem_lista':([112,118,175,254,343,],[136,136,209,136,136,]),'verificar':([123,131,],[146,151,]),'statement':([133,134,155,156,157,158,159,160,161,162,177,183,186,213,214,359,374,392,409,],[153,173,187,188,189,190,191,192,193,194,212,215,221,257,258,372,378,399,415,]),'asignacion':([133,134,155,156,157,158,159,160,161,162,177,183,186,213,214,359,374,392,409,],[154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,]),'if':([133,134,155,156,157,158,159,160,161,162,177,183,186,213,214,359,374,392,409,],[155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,]),'vars':([133,134,145,152,155,156,157,158,159,160,161,162,167,168,177,180,182,183,186,213,214,359,374,392,409,],[156,156,178,178,156,156,156,156,156,156,156,156,201,202,156,178,178,156,156,156,156,156,156,156,156,]),'while':([133,134,155,156,157,158,159,160,161,162,177,183,186,213,214,359,374,392,409,],[157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,]),'for':([133,134,155,156,157,158,159,160,161,162,177,183,186,213,214,359,374,392,409,],[158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,]),'escritura':([133,134,155,156,157,158,159,160,161,162,177,183,186,213,214,359,374,392,409,],[159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,]),'escritura_var':([133,134,155,156,157,158,159,160,161,162,177,183,186,213,214,359,374,392,409,],[160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,]),'lectura':([133,134,155,156,157,158,159,160,161,162,177,183,186,213,214,359,374,392,409,],[161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,]),'func_call':([133,134,155,156,157,158,159,160,161,162,177,183,186,213,214,359,374,392,409,],[162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,]),'var_row':([133,134,145,152,155,156,157,158,159,160,161,162,167,168,177,180,182,183,186,213,214,359,374,392,409,],[167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,]),'var_matrix':([133,134,145,152,155,156,157,158,159,160,161,162,167,168,177,180,182,183,186,213,214,359,374,392,409,],[168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,]),'var_func':([145,152,180,182,],[177,183,213,214,]),'func_return_main':([153,],[184,]),'guarda_num_salto':([169,388,],[203,390,]),'expr':([185,199,226,246,248,249,261,262,263,264,269,270,271,272,273,274,278,285,286,296,305,338,375,],[217,234,267,234,285,285,300,301,302,303,307,308,309,310,311,312,319,285,285,336,341,358,234,]),'func_era':([198,],[226,]),'expression':([199,246,248,249,285,286,375,],[227,282,286,286,286,286,379,]),'var_gt':([199,246,248,249,285,286,375,],[228,228,228,228,228,228,228,]),'var_lt':([199,246,248,249,285,286,375,],[229,229,229,229,229,229,229,]),'var_equal':([199,246,248,249,285,286,375,],[230,230,230,230,230,230,230,]),'var_neq':([199,246,248,249,285,286,375,],[231,231,231,231,231,231,231,]),'var_geq':([199,246,248,249,285,286,375,],[232,232,232,232,232,232,232,]),'var_leq':([199,246,248,249,285,286,375,],[233,233,233,233,233,233,233,]),'vars1':([200,],[238,]),'vars2':([200,],[239,]),'vars3':([200,],[240,]),'oper_aritmetica':([200,],[241,]),'vars2_1':([200,],[243,]),'vars3_1':([200,],[244,]),'any_var':([205,],[250,]),'add_func_dir2':([212,],[256,]),'func_call_param':([226,],[266,]),'any':([248,249,285,286,],[284,289,328,329,]),'any_lectura':([252,253,],[291,293,]),'func_return':([256,],[295,]),'add_func_dir':([257,],[297,]),'end_func':([259,298,335,357,],[299,339,355,370,]),'check_bool':([268,325,379,],[306,349,383,]),'func_return_param':([297,],[337,]),'gotof':([306,349,],[342,364,]),'fill_if':([376,],[380,]),'goto':([376,382,416,],[381,385,417,]),'fill_gotof':([381,],[384,]),'gotof_for':([383,],[386,]),'else':([384,],[387,]),'opers':([391,],[394,]),'fill_goto_else':([408,],[414,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> PROGRAM ID SEMICOL programa1','programa',4,'p_programa','parser.py',93),
  ('programa1 -> varsG quad_main funciones end','programa1',4,'p_programa1','parser.py',101),
  ('programa1 -> varsG quad_main funciones main funciones end','programa1',6,'p_programa1','parser.py',102),
  ('programa1 -> varsG quad_main main funciones end','programa1',5,'p_programa1','parser.py',103),
  ('programa1 -> varsG end','programa1',2,'p_programa1','parser.py',104),
  ('programa1 -> quad_main main end','programa1',3,'p_programa1','parser.py',105),
  ('programa1 -> funciones end','programa1',2,'p_programa1','parser.py',106),
  ('funciones -> funcion','funciones',1,'p_funciones','parser.py',112),
  ('funciones -> funciones funcion','funciones',2,'p_funciones2','parser.py',118),
  ('funciones -> empty','funciones',1,'p_funciones3','parser.py',124),
  ('main -> tipo MAIN quad_main2 LP RP LB statement func_return_main RB','main',9,'p_main','parser.py',133),
  ('main -> VOID MAIN quad_main2 LP RP LB statement RB','main',8,'p_main','parser.py',134),
  ('quad_main -> <empty>','quad_main',0,'p_quad_main','parser.py',146),
  ('quad_main2 -> <empty>','quad_main2',0,'p_quad_main2','parser.py',156),
  ('statement -> asignacion SEMICOL statement','statement',3,'p_statement','parser.py',168),
  ('statement -> if statement','statement',2,'p_statement','parser.py',169),
  ('statement -> vars statement','statement',2,'p_statement','parser.py',170),
  ('statement -> while statement','statement',2,'p_statement','parser.py',171),
  ('statement -> for statement','statement',2,'p_statement','parser.py',172),
  ('statement -> escritura statement','statement',2,'p_statement','parser.py',173),
  ('statement -> escritura_var statement','statement',2,'p_statement','parser.py',174),
  ('statement -> lectura statement','statement',2,'p_statement','parser.py',175),
  ('statement -> func_call statement','statement',2,'p_statement','parser.py',176),
  ('statement -> ID row SEMICOL','statement',3,'p_statement','parser.py',177),
  ('statement -> ID matrix SEMICOL','statement',3,'p_statement','parser.py',178),
  ('statement -> empty','statement',1,'p_statement','parser.py',179),
  ('asignacion -> ID IS value','asignacion',3,'p_asignacion','parser.py',185),
  ('vars -> VAR tipo vars1','vars',3,'p_vars','parser.py',228),
  ('vars -> VAR tipo vars2','vars',3,'p_vars','parser.py',229),
  ('vars -> VAR tipo vars3','vars',3,'p_vars','parser.py',230),
  ('vars -> VAR tipo oper_aritmetica','vars',3,'p_vars','parser.py',231),
  ('vars -> VAR tipo ID row SEMICOL','vars',5,'p_vars','parser.py',232),
  ('vars -> VAR tipo ID matrix SEMICOL','vars',5,'p_vars','parser.py',233),
  ('vars -> var_row','vars',1,'p_vars','parser.py',234),
  ('vars -> var_row vars','vars',2,'p_vars','parser.py',235),
  ('vars -> var_matrix','vars',1,'p_vars','parser.py',236),
  ('vars -> var_matrix vars','vars',2,'p_vars','parser.py',237),
  ('vars -> empty','vars',1,'p_vars','parser.py',238),
  ('vars1 -> ID SEMICOL','vars1',2,'p_vars1','parser.py',244),
  ('vars2 -> vars2_1 ID IS value SEMICOL','vars2',5,'p_vars2','parser.py',264),
  ('vars2_1 -> vars2_1 ID IS value COMMA','vars2_1',5,'p_vars2_1','parser.py',308),
  ('vars2_1 -> ID IS value COMMA','vars2_1',4,'p_vars2_3','parser.py',370),
  ('vars2_1 -> empty','vars2_1',1,'p_vars23','parser.py',433),
  ('vars2 -> ID IS value SEMICOL','vars2',4,'p_vars2_2','parser.py',440),
  ('vars3 -> vars3_1 ID SEMICOL','vars3',3,'p_vars3','parser.py',504),
  ('vars3_1 -> vars3_1 ID COMMA','vars3_1',3,'p_vars3_1','parser.py',532),
  ('vars3_1 -> ID COMMA','vars3_1',2,'p_vars3_3','parser.py',561),
  ('vars3 -> ID SEMICOL','vars3',2,'p_vars3_2','parser.py',588),
  ('vars3_1 -> empty','vars3_1',1,'p_vars3_empty','parser.py',613),
  ('varsG -> VAR tipo vars1G varsG','varsG',4,'p_varsG','parser.py',628),
  ('varsG -> VAR tipo vars2G varsG','varsG',4,'p_varsG','parser.py',629),
  ('varsG -> VAR tipo vars3G varsG','varsG',4,'p_varsG','parser.py',630),
  ('varsG -> VAR LB varsG RB','varsG',4,'p_varsG','parser.py',631),
  ('varsG -> var_rowG','varsG',1,'p_varsG','parser.py',632),
  ('varsG -> var_rowG varsG','varsG',2,'p_varsG','parser.py',633),
  ('varsG -> var_matrixG','varsG',1,'p_varsG','parser.py',634),
  ('varsG -> var_matrixG varsG','varsG',2,'p_varsG','parser.py',635),
  ('varsG -> declarar_func varsG','varsG',2,'p_varsG','parser.py',636),
  ('varsG -> declarar_func','varsG',1,'p_varsG','parser.py',637),
  ('varsG -> empty','varsG',1,'p_varsG','parser.py',638),
  ('vars1G -> ID SEMICOL','vars1G',2,'p_vars1G','parser.py',645),
  ('vars2G -> vars2_1G ID IS value SEMICOL','vars2G',5,'p_vars2G','parser.py',664),
  ('vars2_1G -> vars2_1G ID IS value COMMA','vars2_1G',5,'p_vars2_1G','parser.py',708),
  ('vars2_1G -> ID IS value COMMA','vars2_1G',4,'p_vars2_3G','parser.py',770),
  ('vars2_1G -> empty','vars2_1G',1,'p_vars23G','parser.py',834),
  ('vars2G -> ID IS value SEMICOL','vars2G',4,'p_vars2_2G','parser.py',841),
  ('vars3G -> vars3_1G ID SEMICOL','vars3G',3,'p_vars3G','parser.py',904),
  ('vars3_1G -> vars3_1G ID COMMA','vars3_1G',3,'p_vars3_1G','parser.py',931),
  ('vars3_1G -> ID COMMA','vars3_1G',2,'p_vars3_3G','parser.py',960),
  ('vars3G -> ID SEMICOL','vars3G',2,'p_vars3_2G','parser.py',987),
  ('vars3_1G -> empty','vars3_1G',1,'p_vars3G_empty','parser.py',1011),
  ('tipo -> INT','tipo',1,'p_tipo','parser.py',1022),
  ('tipo -> FLOAT','tipo',1,'p_tipo','parser.py',1023),
  ('tipo -> CHAR','tipo',1,'p_tipo','parser.py',1024),
  ('value -> CTE_F','value',1,'p_value_constantes','parser.py',1036),
  ('value -> CTE_I','value',1,'p_value_constantes','parser.py',1037),
  ('value -> ID','value',1,'p_value_id','parser.py',1062),
  ('value -> CTE_C','value',1,'p_value_char','parser.py',1068),
  ('value -> COMILLA ID COMILLA','value',3,'p_value_char2','parser.py',1074),
  ('value -> COMILLAS ID COMILLAS','value',3,'p_value_char2','parser.py',1075),
  ('check_type -> <empty>','check_type',0,'p_check_type','parser.py',1084),
  ('add_fun -> <empty>','add_fun',0,'p_add_func','parser.py',1097),
  ('funcion -> VOID ID add_fun LP param RP verificar LB var_func statement RB end_func','funcion',12,'p_funcion','parser.py',1108),
  ('funcion -> VOID ID add_fun LP RP verificar2 LB var_func statement RB end_func','funcion',11,'p_funcion2','parser.py',1127),
  ('funcion -> tipo ID add_fun LP RP verificar2 LB var_func statement add_func_dir2 func_return RB end_func','funcion',13,'p_funcion4','parser.py',1143),
  ('funcion -> tipo ID add_fun LP param RP verificar LB var_func statement add_func_dir func_return_param RB end_func','funcion',14,'p_funcion3','parser.py',1163),
  ('verificar -> <empty>','verificar',0,'p_verificar','parser.py',1182),
  ('verificar2 -> <empty>','verificar2',0,'p_verificar2','parser.py',1206),
  ('add_func_dir -> <empty>','add_func_dir',0,'p_add_func_dir','parser.py',1220),
  ('add_func_dir2 -> <empty>','add_func_dir2',0,'p_add_func_dir2','parser.py',1234),
  ('var_func -> vars','var_func',1,'p_var_func','parser.py',1251),
  ('param -> tipo ID','param',2,'p_param','parser.py',1257),
  ('param -> param COMMA tipo ID','param',4,'p_param2','parser.py',1264),
  ('param -> empty','param',1,'p_param_empty','parser.py',1271),
  ('declarar_func -> FUNC tipo ID LP RP SEMICOL','declarar_func',6,'p_declarar_func','parser.py',1278),
  ('declarar_func -> FUNC VOID ID LP RP SEMICOL','declarar_func',6,'p_declarar_func','parser.py',1279),
  ('declarar_func -> FUNC tipo ID LP declarar_param RP SEMICOL','declarar_func',7,'p_declarar_func2','parser.py',1296),
  ('declarar_func -> FUNC VOID ID LP declarar_param RP SEMICOL','declarar_func',7,'p_declarar_func2','parser.py',1297),
  ('declarar_param -> tipo COMMA declarar_param','declarar_param',3,'p_declarar_param','parser.py',1320),
  ('declarar_param -> tipo declarar_param','declarar_param',2,'p_declarar_param2','parser.py',1327),
  ('declarar_param -> empty','declarar_param',1,'p_declarar_param_empty','parser.py',1334),
  ('end_func -> <empty>','end_func',0,'p_end_func','parser.py',1340),
  ('func_call -> ID LP RP SEMICOL','func_call',4,'p_func_call','parser.py',1349),
  ('func_call -> ID LP func_era func_call_param RP SEMICOL','func_call',6,'p_func_call_con_param','parser.py',1383),
  ('func_era -> <empty>','func_era',0,'p_func_era','parser.py',1447),
  ('func_call_param -> expr','func_call_param',1,'p_func_call_param2','parser.py',1458),
  ('func_call_param -> func_call_param COMMA expr','func_call_param',3,'p_func_call_param3','parser.py',1467),
  ('func_return -> RETURN expr SEMICOL','func_return',3,'p_func_return','parser.py',1477),
  ('func_return_param -> RETURN expr SEMICOL','func_return_param',3,'p_func_return_param','parser.py',1532),
  ('func_return_main -> RETURN expr SEMICOL','func_return_main',3,'p_func_return_main','parser.py',1585),
  ('end -> <empty>','end',0,'p_end','parser.py',1641),
  ('var_row -> VAR tipo ID row IS LP lista2 RP SEMICOL','var_row',9,'p_var_row','parser.py',1655),
  ('var_rowG -> VAR tipo ID row IS LP lista2 RP SEMICOL','var_rowG',9,'p_var_rowG','parser.py',1677),
  ('elem_lista -> value','elem_lista',1,'p_elem_lista','parser.py',1699),
  ('elem_lista -> empty','elem_lista',1,'p_elem_lista','parser.py',1700),
  ('lista2 -> elem_lista COMMA lista2','lista2',3,'p_lista2','parser.py',1708),
  ('lista2 -> elem_lista COMMA elem_lista','lista2',3,'p_lista2','parser.py',1709),
  ('row -> LC CTE_I RC','row',3,'p_row','parser.py',1717),
  ('var_matrix -> VAR tipo ID matrix IS matrix2 SEMICOL','var_matrix',7,'p_var_matrix','parser.py',1733),
  ('var_matrixG -> VAR tipo ID matrix IS matrix2 SEMICOL','var_matrixG',7,'p_var_matrixG','parser.py',1755),
  ('matrix2 -> LP lista2 RP COMMA matrix2','matrix2',5,'p_matrix2','parser.py',1781),
  ('matrix2 -> LP lista2 RP COMMA LP lista2 RP','matrix2',7,'p_matrix3','parser.py',1788),
  ('row_list -> row COMMA row_list','row_list',3,'p_row_list','parser.py',1799),
  ('row_list -> row COMMA row','row_list',3,'p_row_list','parser.py',1800),
  ('matrix -> row row','matrix',2,'p_matrix','parser.py',1806),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',1832),
  ('if -> IF LP expression RP check_bool gotof LB statement RB fill_if','if',10,'p_if','parser.py',1843),
  ('if -> IF LP expression RP check_bool gotof LB statement RB goto fill_gotof else','if',12,'p_if','parser.py',1844),
  ('else -> ELSE guarda_num_salto LB statement RB fill_goto_else','else',6,'p_else','parser.py',1860),
  ('goto -> <empty>','goto',0,'p_goto','parser.py',1866),
  ('gotof -> <empty>','gotof',0,'p_gotof','parser.py',1876),
  ('fill_goto_else -> <empty>','fill_goto_else',0,'p_fill_goto_else','parser.py',1889),
  ('fill_gotof -> <empty>','fill_gotof',0,'p_fill_gotof','parser.py',1899),
  ('fill_gotof2 -> <empty>','fill_gotof2',0,'p_fill_gotof2','parser.py',1911),
  ('fill_if -> <empty>','fill_if',0,'p_fill_if','parser.py',1924),
  ('guarda_num_salto -> <empty>','guarda_num_salto',0,'p_guarda_num_salto','parser.py',1935),
  ('while -> WHILE guarda_num_salto LP expression RP check_bool gotof LB statement RB goto','while',11,'p_while','parser.py',1953),
  ('for -> FOR LP VAR tipo ID IS value SEMICOL expression check_bool gotof_for SEMICOL ID opers RP LB statement RB goto','for',19,'p_for','parser.py',1960),
  ('gotof_for -> <empty>','gotof_for',0,'p_gotof_for','parser.py',1966),
  ('opers -> IS value','opers',2,'p_opers','parser.py',1975),
  ('opers -> PLUS IS value','opers',3,'p_opers','parser.py',1976),
  ('opers -> MINUS IS value','opers',3,'p_opers','parser.py',1977),
  ('opers -> DIV IS value','opers',3,'p_opers','parser.py',1978),
  ('opers -> MUL IS value','opers',3,'p_opers','parser.py',1979),
  ('opers -> PLUS PLUS','opers',2,'p_opers','parser.py',1980),
  ('opers -> MINUS MINUS','opers',2,'p_opers','parser.py',1981),
  ('escritura -> PRINT LP COMILLA any COMILLA RP SEMICOL','escritura',7,'p_escritura','parser.py',1992),
  ('escritura -> PRINT LP COMILLAS any COMILLAS RP SEMICOL','escritura',7,'p_escritura','parser.py',1993),
  ('escritura_var -> PRINT LP any_var RP SEMICOL','escritura_var',5,'p_escritura_var','parser.py',2005),
  ('any_var -> ID','any_var',1,'p_any_var','parser.py',2014),
  ('any -> expr any','any',2,'p_any','parser.py',2029),
  ('any -> expression any','any',2,'p_any','parser.py',2030),
  ('any -> empty','any',1,'p_any_empty','parser.py',2040),
  ('lectura -> READ LP COMILLA any_lectura COMILLA RP SEMICOL','lectura',7,'p_lectura','parser.py',2046),
  ('lectura -> READ LP COMILLAS any_lectura COMILLAS RP SEMICOL','lectura',7,'p_lectura','parser.py',2047),
  ('any_lectura -> ID','any_lectura',1,'p_any_lectura','parser.py',2053),
  ('expression -> var_gt','expression',1,'p_expression','parser.py',2077),
  ('expression -> var_lt','expression',1,'p_expression','parser.py',2078),
  ('expression -> var_equal','expression',1,'p_expression','parser.py',2079),
  ('expression -> var_neq','expression',1,'p_expression','parser.py',2080),
  ('expression -> var_geq','expression',1,'p_expression','parser.py',2081),
  ('expression -> var_leq','expression',1,'p_expression','parser.py',2082),
  ('expression -> expr','expression',1,'p_expression','parser.py',2083),
  ('expression -> TRUE','expression',1,'p_expression','parser.py',2084),
  ('expression -> FALSE','expression',1,'p_expression','parser.py',2085),
  ('expression -> ID','expression',1,'p_expression','parser.py',2086),
  ('var_lt -> expr LT expr','var_lt',3,'p_LT','parser.py',2093),
  ('var_gt -> expr GT expr','var_gt',3,'p_GT','parser.py',2151),
  ('var_leq -> expr LEQ expr','var_leq',3,'p_LEQ','parser.py',2212),
  ('var_geq -> expr GEQ expr','var_geq',3,'p_GEQ','parser.py',2270),
  ('var_equal -> expr EQUAL expr','var_equal',3,'p_EQUAL','parser.py',2328),
  ('var_neq -> expr NEQ expr','var_neq',3,'p_NEQ','parser.py',2386),
  ('oper_aritmetica -> ID IS expr SEMICOL','oper_aritmetica',4,'p_oper_aritmetica','parser.py',2454),
  ('expr -> expr MUL expr','expr',3,'p_expr','parser.py',2488),
  ('expr -> expr DIV expr','expr',3,'p_expr','parser.py',2489),
  ('expr -> expr PLUS expr','expr',3,'p_expr','parser.py',2490),
  ('expr -> expr MINUS expr','expr',3,'p_expr','parser.py',2491),
  ('expr -> CTE_I','expr',1,'p_expression_int_float','parser.py',2677),
  ('expr -> CTE_F','expr',1,'p_expression_int_float','parser.py',2678),
  ('expr -> ID','expr',1,'p_expression_id','parser.py',2705),
  ('check_bool -> <empty>','check_bool',0,'p_check_bool','parser.py',2722),
]
